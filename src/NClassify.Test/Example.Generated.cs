// Generated by NClassify.Generator, Version=0.1
#pragma warning disable 0612, 1591, 3001, 3002, 3003, 3021
#region Designer generated code
namespace NClassify.Example
{
    #region SampleEnum
    [global::System.Xml.Serialization.XmlType("SampleEnum")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public enum SampleEnum
    {
        /// <summary>
        /// one = 1
        /// </summary>
        [global::System.Xml.Serialization.XmlEnum("one")]
        One = 1,
        /// <summary>
        /// two = 2
        /// </summary>
        [global::System.Xml.Serialization.XmlEnum("two")]
        Two = 2,
        /// <summary>
        /// three = 3
        /// </summary>
        [global::System.Xml.Serialization.XmlEnum("three")]
        Three = 3,
    }
    #endregion
    #region SimpleInt32
    [global::System.Xml.Serialization.XmlType("SimpleInt32")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct SimpleInt32 : global::System.IEquatable<SimpleInt32>, global::System.IComparable<SimpleInt32>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        public static bool IsValidValue(int value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.CompareTo(1) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeGreaterThan, TypeFields.Value, 1));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private int __fld_value;
        public SimpleInt32(int value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public int Value
        {
            get
            {
                if (!__has_value) return 0;
                return __fld_value;
            }
            private set
            {
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is SimpleInt32 ? Equals((SimpleInt32)obj) : base.Equals(obj);
        }
        public bool Equals(SimpleInt32 other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(SimpleInt32 other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator SimpleInt32(int value)
        {
            return new SimpleInt32(value);
        }
        public static explicit operator int(SimpleInt32 value)
        {
            return value.Value;
        }
        public static bool operator ==(SimpleInt32 x, SimpleInt32 y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(SimpleInt32 x, SimpleInt32 y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region SimpleBytes
    [global::System.Xml.Serialization.XmlType("SimpleBytes")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct SimpleBytes : global::System.IEquatable<SimpleBytes>, global::System.IComparable<SimpleBytes>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        public static bool IsValidValue(global::NClassify.Library.ByteArray value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (value.Length < 1)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeLongerThan, TypeFields.Value, 1));
                return false;
            }
            if (value.Length > 255)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeShorterThan, TypeFields.Value, 255));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private global::NClassify.Library.ByteArray __fld_value;
        public SimpleBytes(global::NClassify.Library.ByteArray value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public global::NClassify.Library.ByteArray Value
        {
            get
            {
                if (!__has_value) return new byte[0];
                return __fld_value;
            }
            private set
            {
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is SimpleBytes ? Equals((SimpleBytes)obj) : base.Equals(obj);
        }
        public bool Equals(SimpleBytes other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(SimpleBytes other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator SimpleBytes(global::NClassify.Library.ByteArray value)
        {
            return new SimpleBytes(value);
        }
        public static explicit operator global::NClassify.Library.ByteArray(SimpleBytes value)
        {
            return value.Value;
        }
        public static bool operator ==(SimpleBytes x, SimpleBytes y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(SimpleBytes x, SimpleBytes y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region SimpleText
    [global::System.Xml.Serialization.XmlType("SimpleText")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct SimpleText : global::System.IEquatable<SimpleText>, global::System.IComparable<SimpleText>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        private static readonly string[] __in_value = new string[] {"abc", "def", "ghi", "jkl", "mno", "pqr", "stu", "vwx", "yz"};
        public static bool IsValidValue(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Value));
                return false;
            }
            if (global::System.Array.BinarySearch(__in_value, value) < 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeOneOf, TypeFields.Value, string.Join(", ", __in_value)));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private string __fld_value;
        public SimpleText(string value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public string Value
        {
            get
            {
                if (!__has_value) return "";
                return __fld_value;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Value");
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is SimpleText ? Equals((SimpleText)obj) : base.Equals(obj);
        }
        public bool Equals(SimpleText other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(SimpleText other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator SimpleText(string value)
        {
            return new SimpleText(value);
        }
        public static explicit operator string(SimpleText value)
        {
            return value.Value;
        }
        public static bool operator ==(SimpleText x, SimpleText y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(SimpleText x, SimpleText y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region simple_uri
    [global::System.Xml.Serialization.XmlType("simple_uri")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial struct SimpleUri : global::System.IEquatable<SimpleUri>, global::System.IComparable<SimpleUri>, global::NClassify.Library.IValidate
    {
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Value = 0
        }
        #endregion
        #region Instance Fields and Members
        private static readonly global::System.Text.RegularExpressions.Regex __valid_value = new global::System.Text.RegularExpressions.Regex("^https?\\://.+", global::System.Text.RegularExpressions.RegexOptions.Singleline | global::System.Text.RegularExpressions.RegexOptions.IgnoreCase);
        private static bool IsValidUri(string value)
        {
            global::System.Uri tmp;
            return global::System.Uri.TryCreate(value, global::System.UriKind.Absolute, out tmp);
        }
        public static bool IsValidValue(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.Value));
                return false;
            }
            if (value.Length < 8)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeLongerThan, TypeFields.Value, 8));
                return false;
            }
            if (value.Length > 2048)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustBeShorterThan, TypeFields.Value, 2048));
                return false;
            }
            if (!__valid_value.IsMatch(value.ToString()))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MustMatchFormat, TypeFields.Value, "^https?\\://.+"));
                return false;
            }
            if (!(IsValidUri(value)))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.InvalidField, TypeFields.Value));
                return false;
            }
            return true;
        }
        private bool __has_value;
        private string __fld_value;
        public SimpleUri(string value) : this()
        {
            this.Value = value;
        }
        public bool HasValue
        {
            get { return __has_value; }
        }
        public string Value
        {
            get
            {
                if (!__has_value) return "";
                return __fld_value;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Value");
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (!__has_value)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.Value, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.Value));
                errorCount++;
            }
            return errorCount;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is SimpleUri ? Equals((SimpleUri)obj) : base.Equals(obj);
        }
        public bool Equals(SimpleUri other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(SimpleUri other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator SimpleUri(string value)
        {
            return new SimpleUri(value);
        }
        public static explicit operator string(SimpleUri value)
        {
            return value.Value;
        }
        public static bool operator ==(SimpleUri x, SimpleUri y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(SimpleUri x, SimpleUri y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region CircleA
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICircleA : global::NClassify.Library.IMessage
    {
        bool HasB { get; }
        global::NClassify.Example.CircleB B { get; }
    }
    [global::System.Xml.Serialization.XmlType("CircleA")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class CircleA : ICircleA, global::NClassify.Library.IBuilder
    {
        private static readonly CircleA _defaultInstance = new CircleA(false);
        public static CircleA DefaultInstance { get { return _defaultInstance; } }
        static CircleA()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected CircleA(bool initalize)
        {
            if (initalize) Initialize();
        }
        public CircleA() : this(true)
        {
        }
        public CircleA(ICircleA copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            B = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidB(global::NClassify.Example.CircleB value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.B, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.B));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.B, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_b;
        private global::NClassify.Example.CircleB __fld_b;
        #endregion
        #region Instance Members
        public bool HasB
        {
            get { return __has_b; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_b = global::NClassify.Example.CircleB.DefaultInstance;
                __has_b = false;
            }
        }
        public global::NClassify.Example.CircleB B
        {
            get
            {
                return __fld_b;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("B");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_b = value;
                __has_b = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_b && !IsValidB(__fld_b, onError)) errorCount++;
            return errorCount;
        }
        public ICircleA AsReadOnly()
        {
            if (_readOnly) return this;
            CircleA copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_b.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_b = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_b = false;
            __fld_b = global::NClassify.Example.CircleB.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            CircleA value = (CircleA)base.MemberwiseClone();
            value.__fld_b = (global::NClassify.Example.CircleB)value.__fld_b.Clone();
            return value;
        }
        public CircleA Clone()
        {
            return (CircleA)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ICircleA) MergeFrom((ICircleA)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ICircleA other)
        {
            if (other.HasB) B = (global::NClassify.Example.CircleB)other.B.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "B" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("CircleA", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::NClassify.Example.CircleB value = __fld_b;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::NClassify.Example.CircleB.DefaultInstance) ? new global::NClassify.Example.CircleB() : new global::NClassify.Example.CircleB(__fld_b);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_b = value;
                        __has_b = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("CircleA", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_b)
            {
                __fld_b.WriteXml("B", writer);
            }
        }
        #endregion
    }
    #endregion
    #region CircleB
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICircleB : global::NClassify.Library.IMessage
    {
        bool HasA { get; }
        global::NClassify.Example.CircleA A { get; }
    }
    [global::System.Xml.Serialization.XmlType("CircleB")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class CircleB : ICircleB, global::NClassify.Library.IBuilder
    {
        private static readonly CircleB _defaultInstance = new CircleB(false);
        public static CircleB DefaultInstance { get { return _defaultInstance; } }
        static CircleB()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected CircleB(bool initalize)
        {
            if (initalize) Initialize();
        }
        public CircleB() : this(true)
        {
        }
        public CircleB(ICircleB copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            A = 1,
        }
        #endregion
        #region Static Data
        public static bool IsValidA(global::NClassify.Example.CircleA value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.A, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.A));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.A, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_a;
        private global::NClassify.Example.CircleA __fld_a;
        #endregion
        #region Instance Members
        public bool HasA
        {
            get { return __has_a; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_a = global::NClassify.Example.CircleA.DefaultInstance;
                __has_a = false;
            }
        }
        public global::NClassify.Example.CircleA A
        {
            get
            {
                return __fld_a;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("A");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_a = value;
                __has_a = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_a && !IsValidA(__fld_a, onError)) errorCount++;
            return errorCount;
        }
        public ICircleB AsReadOnly()
        {
            if (_readOnly) return this;
            CircleB copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_a.MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_a = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_a = false;
            __fld_a = global::NClassify.Example.CircleA.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            CircleB value = (CircleB)base.MemberwiseClone();
            value.__fld_a = (global::NClassify.Example.CircleA)value.__fld_a.Clone();
            return value;
        }
        public CircleB Clone()
        {
            return (CircleB)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ICircleB) MergeFrom((ICircleB)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ICircleB other)
        {
            if (other.HasA) A = (global::NClassify.Example.CircleA)other.A.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "A" };
        private static readonly bool[] _isMessageFldIx = new bool[] { true };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("CircleB", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 0:
                    {
                        global::NClassify.Example.CircleA value = __fld_a;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::NClassify.Example.CircleA.DefaultInstance) ? new global::NClassify.Example.CircleA() : new global::NClassify.Example.CircleA(__fld_a);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_a = value;
                        __has_a = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("CircleB", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_a)
            {
                __fld_a.WriteXml("A", writer);
            }
        }
        #endregion
    }
    #endregion
    #region CircleC
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ICircleC : global::NClassify.Library.IMessage
    {
    }
    [global::System.Xml.Serialization.XmlType("CircleC")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class CircleC : global::NClassify.Example.CircleA, ICircleC, global::NClassify.Library.IBuilder
    {
        private static readonly CircleC _defaultInstance = new CircleC(false);
        public static new CircleC DefaultInstance { get { return _defaultInstance; } }
        static CircleC()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected CircleC(bool initalize) : base(initalize)
        {
            if (initalize) Initialize();
        }
        public CircleC() : this(true)
        {
        }
        public CircleC(ICircleC copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public new enum TypeFields
        {
        }
        #endregion
        #region Static Data
        #endregion
        #region Instance Fields
        #endregion
        #region Instance Members
        public override int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            errorCount += base.GetBrokenRules(onError);
            return errorCount;
        }
        public override void MakeReadOnly()
        {
            if (IsReadOnly()) return;
            base.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public override void AcceptDefaults()
        {
            base.AcceptDefaults();
        }
        public override void Clear()
        {
            base.Clear();
            Initialize();
        }
        private void Initialize()
        {
        }
        protected override object MemberwiseClone()
        {
            CircleC value = (CircleC)base.MemberwiseClone();
            return value;
        }
        public new CircleC Clone()
        {
            return (CircleC)this.MemberwiseClone();
        }
        public override void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ICircleC) MergeFrom((ICircleC)other);
            base.MergeFrom(other);
        }
        public void MergeFrom(ICircleC other)
        {
            base.MergeFrom(other);
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "" };
        protected override void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                base.MergeField(reader);
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public override void MergeTo(global::System.Xml.XmlWriter writer)
        {
            base.MergeTo(writer);
        }
        #endregion
    }
    #endregion
    #region SampleMsg
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ISampleMsg : global::NClassify.Library.IMessage
    {
        bool HasId { get; }
        global::NClassify.Example.SimpleInt32 Id { get; }
        bool HasUri { get; }
        global::NClassify.Example.SimpleUri Uri { get; }
        bool HasAlphaGroup { get; }
        global::NClassify.Example.SimpleText AlphaGroup { get; }
        bool HasEnum { get; }
        global::NClassify.Example.SampleEnum Enum { get; }
        bool HasBytes { get; }
        global::NClassify.Example.SimpleBytes Bytes { get; }
        bool HasVerified { get; }
        bool Verified { get; }
        global::System.Collections.Generic.IList<global::NClassify.Example.SampleMsg> ChildrenList { get; }
        global::System.Collections.Generic.IList<global::System.DateTime> DateModifiedList { get; }
        bool HasIsValid_ { get; }
        bool IsValid_ { get; }
        bool HasAssertValid_ { get; }
        bool AssertValid_ { get; }
        bool HasGetBrokenRules_ { get; }
        bool GetBrokenRules_ { get; }
        bool HasClear_ { get; }
        bool Clear_ { get; }
        bool HasInitialize_ { get; }
        bool Initialize_ { get; }
        bool HasMergeFrom_ { get; }
        bool MergeFrom_ { get; }
        bool HasMergeTo_ { get; }
        bool MergeTo_ { get; }
        bool HasReadXml_ { get; }
        bool ReadXml_ { get; }
        bool HasWriteXml_ { get; }
        bool WriteXml_ { get; }
        bool HasTypeFields_ { get; }
        bool TypeFields_ { get; }
    }
    [global::System.Xml.Serialization.XmlType("SampleMsg")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class SampleMsg : ISampleMsg, global::NClassify.Library.IBuilder
    {
        private static readonly SampleMsg _defaultInstance = new SampleMsg(false);
        public static SampleMsg DefaultInstance { get { return _defaultInstance; } }
        static SampleMsg()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected SampleMsg(bool initalize)
        {
            if (initalize) Initialize();
        }
        public SampleMsg() : this(true)
        {
        }
        public SampleMsg(ISampleMsg copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Id = 1,
            Uri = 2,
            AlphaGroup = 3,
            Enum = 4,
            Bytes = 5,
            Verified = 10,
            ReadErrors = 11,
            ChildrenList = 20,
            DateModifiedList = 31,
            IsValid_ = 100,
            AssertValid_ = 102,
            GetBrokenRules_ = 103,
            Clear_ = 104,
            Initialize_ = 105,
            MergeFrom_ = 106,
            MergeTo_ = 107,
            ReadXml_ = 108,
            WriteXml_ = 109,
            TypeFields_ = 110,
        }
        #endregion
        #region _ReadErrors
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _ReadErrors : global::System.Collections.Generic.IList<string>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("ReadErrors");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<string> _contents;
            public _ReadErrors()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<string>();
            }
            public _ReadErrors(global::System.Collections.Generic.IList<string> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<string>(AssertNotNull(contents).Count);
                foreach (string item in contents)
                {
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<string> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public string this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(string value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<string> value)
            {
                foreach (string item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, string value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(string item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(string item) { return _contents.Contains(item); }
            public int IndexOf(string item) { return _contents.IndexOf(item); }
            public void CopyTo(string[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _ReadErrors Clone()
            {
                return _readOnly ? this : new _ReadErrors(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<string> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _ChildrenList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _ChildrenList : global::System.Collections.Generic.IList<global::NClassify.Example.SampleMsg>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("ChildrenList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::NClassify.Example.SampleMsg> _contents;
            public _ChildrenList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SampleMsg>();
            }
            public _ChildrenList(global::System.Collections.Generic.IList<global::NClassify.Example.SampleMsg> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SampleMsg>(AssertNotNull(contents).Count);
                foreach (global::NClassify.Example.SampleMsg item in contents)
                {
                    if (clone)
                        _contents.Add((global::NClassify.Example.SampleMsg)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::NClassify.Example.SampleMsg> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::NClassify.Example.SampleMsg this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::NClassify.Example.SampleMsg value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::NClassify.Example.SampleMsg> value)
            {
                foreach (global::NClassify.Example.SampleMsg item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::NClassify.Example.SampleMsg value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::NClassify.Example.SampleMsg item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::NClassify.Example.SampleMsg item) { return _contents.Contains(item); }
            public int IndexOf(global::NClassify.Example.SampleMsg item) { return _contents.IndexOf(item); }
            public void CopyTo(global::NClassify.Example.SampleMsg[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _ChildrenList Clone()
            {
                return _readOnly ? this : new _ChildrenList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::NClassify.Example.SampleMsg> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _DateModifiedList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _DateModifiedList : global::System.Collections.Generic.IList<global::System.DateTime>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("DateModifiedList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::System.DateTime> _contents;
            public _DateModifiedList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::System.DateTime>();
            }
            public _DateModifiedList(global::System.Collections.Generic.IList<global::System.DateTime> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::System.DateTime>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<global::System.DateTime> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::System.DateTime this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::System.DateTime value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::System.DateTime> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::System.DateTime value) { Modify.Insert(index, value); }
            public bool Remove(global::System.DateTime item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::System.DateTime item) { return _contents.Contains(item); }
            public int IndexOf(global::System.DateTime item) { return _contents.IndexOf(item); }
            public void CopyTo(global::System.DateTime[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _DateModifiedList Clone()
            {
                return _readOnly ? this : new _DateModifiedList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::System.DateTime> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidId(global::NClassify.Example.SimpleInt32 value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Id, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidUri(global::NClassify.Example.SimpleUri value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Uri, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidAlphaGroup(global::NClassify.Example.SimpleText value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.AlphaGroup, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidBytes(global::NClassify.Example.SimpleBytes value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.Bytes, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidReadErrors(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ReadErrors, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.ReadErrors));
                return false;
            }
            if (value.Length > 0)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ReadErrors, global::NClassify.Library.ResourceMessages.MustBeShorterThan, TypeFields.ReadErrors, 0));
                return false;
            }
            return true;
        }
        public static bool IsValidChildrenList(global::NClassify.Example.SampleMsg value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ChildrenList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.ChildrenList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ChildrenList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_id;
        private global::NClassify.Example.SimpleInt32 __fld_id;
        private bool __has_uri;
        private global::NClassify.Example.SimpleUri __fld_uri;
        private bool __has_alphaGroup;
        private global::NClassify.Example.SimpleText __fld_alphaGroup;
        private bool __has_enum;
        private global::NClassify.Example.SampleEnum __fld_enum;
        private bool __has_bytes;
        private global::NClassify.Example.SimpleBytes __fld_bytes;
        private bool __has_verified;
        private bool __fld_verified;
        private _ReadErrors __fld_errors;
        private _ChildrenList __fld_children;
        private _DateModifiedList __fld_dateModified;
        private bool __has_isValid;
        private bool __fld_isValid;
        private bool __has_assertValid;
        private bool __fld_assertValid;
        private bool __has_getBrokenRules;
        private bool __fld_getBrokenRules;
        private bool __has_clear;
        private bool __fld_clear;
        private bool __has_initialize;
        private bool __fld_initialize;
        private bool __has_mergeFrom;
        private bool __fld_mergeFrom;
        private bool __has_mergeTo;
        private bool __fld_mergeTo;
        private bool __has_readXml;
        private bool __fld_readXml;
        private bool __has_writeXml;
        private bool __fld_writeXml;
        private bool __has_typeFields;
        private bool __fld_typeFields;
        #endregion
        #region Instance Members
        public bool HasId
        {
            get { return __has_id; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_id = new global::NClassify.Example.SimpleInt32(0);
                __has_id = false;
            }
        }
        public global::NClassify.Example.SimpleInt32 Id
        {
            get
            {
                return __fld_id;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_id = value;
                __has_id = true;
            }
        }
        public bool HasUri
        {
            get { return __has_uri; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_uri = new global::NClassify.Example.SimpleUri("");
                __has_uri = false;
            }
        }
        public global::NClassify.Example.SimpleUri Uri
        {
            get
            {
                return __fld_uri;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_uri = value;
                __has_uri = true;
            }
        }
        public bool HasAlphaGroup
        {
            get { return __has_alphaGroup; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_alphaGroup = new global::NClassify.Example.SimpleText("abc");
                __has_alphaGroup = false;
            }
        }
        public global::NClassify.Example.SimpleText AlphaGroup
        {
            get
            {
                return __fld_alphaGroup;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_alphaGroup = value;
                __has_alphaGroup = true;
            }
        }
        public bool HasEnum
        {
            get { return __has_enum; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_enum = global::NClassify.Example.SampleEnum.One;
                __has_enum = false;
            }
        }
        public global::NClassify.Example.SampleEnum Enum
        {
            get
            {
                return __fld_enum;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_enum = value;
                __has_enum = true;
            }
        }
        public bool HasBytes
        {
            get { return __has_bytes; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_bytes = new global::NClassify.Example.SimpleBytes(new byte[0]);
                __has_bytes = false;
            }
        }
        public global::NClassify.Example.SimpleBytes Bytes
        {
            get
            {
                return __fld_bytes;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_bytes = value;
                __has_bytes = true;
            }
        }
        public bool HasVerified
        {
            get { return __has_verified; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_verified = false;
                __has_verified = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool Verified
        {
            get
            {
                return __fld_verified;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_verified = value;
                __has_verified = true;
            }
        }
        protected global::System.Collections.Generic.IList<string> ReadErrors
        {
            get
            {
                if (!IsReadOnly()) return new global::System.Collections.ObjectModel.ReadOnlyCollection<string>(__fld_errors);
                return __fld_errors;
            }
            private set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_errors = new _ReadErrors(value, false);
            }
        }
        public global::System.Collections.Generic.IList<global::NClassify.Example.SampleMsg> ChildrenList
        {
            get
            {
                return __fld_children;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_children = new _ChildrenList(value, false);
            }
        }
        public global::System.Collections.Generic.IList<global::System.DateTime> DateModifiedList
        {
            get
            {
                return __fld_dateModified;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateModified = new _DateModifiedList(value, false);
            }
        }
        public bool HasIsValid_
        {
            get { return __has_isValid; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_isValid = false;
                __has_isValid = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool IsValid_
        {
            get
            {
                return __fld_isValid;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_isValid = value;
                __has_isValid = true;
            }
        }
        public bool HasAssertValid_
        {
            get { return __has_assertValid; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_assertValid = false;
                __has_assertValid = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool AssertValid_
        {
            get
            {
                return __fld_assertValid;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_assertValid = value;
                __has_assertValid = true;
            }
        }
        public bool HasGetBrokenRules_
        {
            get { return __has_getBrokenRules; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_getBrokenRules = false;
                __has_getBrokenRules = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool GetBrokenRules_
        {
            get
            {
                return __fld_getBrokenRules;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_getBrokenRules = value;
                __has_getBrokenRules = true;
            }
        }
        public bool HasClear_
        {
            get { return __has_clear; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clear = false;
                __has_clear = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool Clear_
        {
            get
            {
                return __fld_clear;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_clear = value;
                __has_clear = true;
            }
        }
        public bool HasInitialize_
        {
            get { return __has_initialize; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_initialize = false;
                __has_initialize = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool Initialize_
        {
            get
            {
                return __fld_initialize;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_initialize = value;
                __has_initialize = true;
            }
        }
        public bool HasMergeFrom_
        {
            get { return __has_mergeFrom; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_mergeFrom = false;
                __has_mergeFrom = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool MergeFrom_
        {
            get
            {
                return __fld_mergeFrom;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_mergeFrom = value;
                __has_mergeFrom = true;
            }
        }
        public bool HasMergeTo_
        {
            get { return __has_mergeTo; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_mergeTo = false;
                __has_mergeTo = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool MergeTo_
        {
            get
            {
                return __fld_mergeTo;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_mergeTo = value;
                __has_mergeTo = true;
            }
        }
        public bool HasReadXml_
        {
            get { return __has_readXml; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_readXml = false;
                __has_readXml = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool ReadXml_
        {
            get
            {
                return __fld_readXml;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_readXml = value;
                __has_readXml = true;
            }
        }
        public bool HasWriteXml_
        {
            get { return __has_writeXml; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_writeXml = false;
                __has_writeXml = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool WriteXml_
        {
            get
            {
                return __fld_writeXml;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_writeXml = value;
                __has_writeXml = true;
            }
        }
        public bool HasTypeFields_
        {
            get { return __has_typeFields; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_typeFields = false;
                __has_typeFields = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        public bool TypeFields_
        {
            get
            {
                return __fld_typeFields;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_typeFields = value;
                __has_typeFields = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_id && !IsValidId(__fld_id, onError)) errorCount++;
            if (__has_uri && !IsValidUri(__fld_uri, onError)) errorCount++;
            if (!__has_alphaGroup)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.AlphaGroup, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.AlphaGroup));
                errorCount++;
            }
            if (__has_bytes && !IsValidBytes(__fld_bytes, onError)) errorCount++;
            foreach (string item in __fld_errors)
            {
                if (!IsValidReadErrors(item, onError)) errorCount++;
            }
            foreach (global::NClassify.Example.SampleMsg item in __fld_children)
            {
                if (!IsValidChildrenList(item, onError)) errorCount++;
            }
            return errorCount;
        }
        public ISampleMsg AsReadOnly()
        {
            if (_readOnly) return this;
            SampleMsg copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            __fld_errors.MakeReadOnly();
            __fld_children.MakeReadOnly();
            __fld_dateModified.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
            __has_id = true;
            __has_uri = true;
            __has_alphaGroup = true;
            __has_enum = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_id = false;
            __fld_id = new global::NClassify.Example.SimpleInt32(0);
            __has_uri = false;
            __fld_uri = new global::NClassify.Example.SimpleUri("");
            __has_alphaGroup = false;
            __fld_alphaGroup = new global::NClassify.Example.SimpleText("");
            __has_enum = false;
            __fld_enum = default(global::NClassify.Example.SampleEnum);
            __has_bytes = false;
            __fld_bytes = new global::NClassify.Example.SimpleBytes(new byte[0]);
            __has_verified = false;
            __fld_verified = false;
            __fld_errors = new _ReadErrors();
            __fld_children = new _ChildrenList();
            __fld_dateModified = new _DateModifiedList();
            __has_isValid = false;
            __fld_isValid = false;
            __has_assertValid = false;
            __fld_assertValid = false;
            __has_getBrokenRules = false;
            __fld_getBrokenRules = false;
            __has_clear = false;
            __fld_clear = false;
            __has_initialize = false;
            __fld_initialize = false;
            __has_mergeFrom = false;
            __fld_mergeFrom = false;
            __has_mergeTo = false;
            __fld_mergeTo = false;
            __has_readXml = false;
            __fld_readXml = false;
            __has_writeXml = false;
            __fld_writeXml = false;
            __has_typeFields = false;
            __fld_typeFields = false;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            SampleMsg value = (SampleMsg)base.MemberwiseClone();
            value.__fld_errors = value.__fld_errors.Clone();
            value.__fld_children = value.__fld_children.Clone();
            value.__fld_dateModified = value.__fld_dateModified.Clone();
            return value;
        }
        public SampleMsg Clone()
        {
            return (SampleMsg)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ISampleMsg) MergeFrom((ISampleMsg)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ISampleMsg other)
        {
            if (other.HasId) Id = other.Id;
            if (other.HasUri) Uri = other.Uri;
            if (other.HasAlphaGroup) AlphaGroup = other.AlphaGroup;
            if (other.HasEnum) Enum = other.Enum;
            if (other.HasBytes) Bytes = other.Bytes;
            if (other.HasVerified) Verified = other.Verified;
            foreach (global::NClassify.Example.SampleMsg item in other.ChildrenList)
                __fld_children.Add((global::NClassify.Example.SampleMsg)item.Clone());
            __fld_dateModified.AddRange(other.DateModifiedList);
            if (other.HasIsValid_) IsValid_ = other.IsValid_;
            if (other.HasAssertValid_) AssertValid_ = other.AssertValid_;
            if (other.HasGetBrokenRules_) GetBrokenRules_ = other.GetBrokenRules_;
            if (other.HasClear_) Clear_ = other.Clear_;
            if (other.HasInitialize_) Initialize_ = other.Initialize_;
            if (other.HasMergeFrom_) MergeFrom_ = other.MergeFrom_;
            if (other.HasMergeTo_) MergeTo_ = other.MergeTo_;
            if (other.HasReadXml_) ReadXml_ = other.ReadXml_;
            if (other.HasWriteXml_) WriteXml_ = other.WriteXml_;
            if (other.HasTypeFields_) TypeFields_ = other.TypeFields_;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "AssertValid", "Clear", "GetBrokenRules", "Id", "Initialize", "IsValid", "MergeFrom", "MergeTo", "ReadXml", "TypeFields", "WriteXml", "alpha_group", "bytes", "children", "enum", "errors", "mod-date", "uri", "verified" };
        private static readonly bool[] _isMessageFldIx = new bool[] { false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("SampleMsg", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 13:
                    {
                        global::NClassify.Example.SampleMsg child = new global::NClassify.Example.SampleMsg();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_children.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        __fld_assertValid = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_assertValid = true;
                        break;
                    }
                    case 1:
                    {
                        __fld_clear = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_clear = true;
                        break;
                    }
                    case 2:
                    {
                        __fld_getBrokenRules = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_getBrokenRules = true;
                        break;
                    }
                    case 3:
                    {
                        __fld_id = new global::NClassify.Example.SimpleInt32(global::NClassify.Library.TypeConverter.Instance.ParseInt32(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                        __has_id = true;
                        break;
                    }
                    case 4:
                    {
                        __fld_initialize = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_initialize = true;
                        break;
                    }
                    case 5:
                    {
                        __fld_isValid = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_isValid = true;
                        break;
                    }
                    case 6:
                    {
                        __fld_mergeFrom = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_mergeFrom = true;
                        break;
                    }
                    case 7:
                    {
                        __fld_mergeTo = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_mergeTo = true;
                        break;
                    }
                    case 8:
                    {
                        __fld_readXml = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_readXml = true;
                        break;
                    }
                    case 9:
                    {
                        __fld_typeFields = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_typeFields = true;
                        break;
                    }
                    case 10:
                    {
                        __fld_writeXml = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_writeXml = true;
                        break;
                    }
                    case 11:
                    {
                        __fld_alphaGroup = new global::NClassify.Example.SimpleText(sbuilder.ToString());
                        __has_alphaGroup = true;
                        break;
                    }
                    case 12:
                    {
                        __fld_bytes = new global::NClassify.Example.SimpleBytes(global::NClassify.Library.TypeConverter.Instance.ParseBytes(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                        __has_bytes = true;
                        break;
                    }
                    case 14:
                    {
                        __fld_enum = (global::NClassify.Example.SampleEnum)global::System.Enum.Parse(typeof(global::NClassify.Example.SampleEnum), sbuilder.ToString(), false);
                        __has_enum = true;
                        break;
                    }
                    case 15:
                    {
                        __fld_errors.Add(sbuilder.ToString());
                        break;
                    }
                    case 16:
                    {
                        __fld_dateModified.Add(global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yy-m-d", global::System.Globalization.CultureInfo.InvariantCulture));
                        break;
                    }
                    case 17:
                    {
                        __fld_uri = new global::NClassify.Example.SimpleUri(sbuilder.ToString());
                        __has_uri = true;
                        break;
                    }
                    case 18:
                    {
                        __fld_verified = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_verified = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("SampleMsg", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_id)
            {
                writer.WriteElementString("Id", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_id.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_uri)
            {
                writer.WriteElementString("uri", __fld_uri.Value);
            }
            if (__has_alphaGroup)
            {
                writer.WriteElementString("alpha_group", __fld_alphaGroup.Value);
            }
            if (__has_enum)
            {
                writer.WriteElementString("enum", __fld_enum.ToString());
            }
            if (__has_bytes)
            {
                writer.WriteElementString("bytes", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_bytes.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_verified)
            {
                writer.WriteElementString("verified", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_verified, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            foreach (global::NClassify.Example.SampleMsg item in __fld_children)
            {
                item.WriteXml("children", writer);
            }
            foreach (global::System.DateTime item in __fld_dateModified)
            {
                writer.WriteElementString("mod-date", global::NClassify.Library.TypeConverter.Instance.ToString(item, "yy-m-d", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_isValid)
            {
                writer.WriteElementString("IsValid", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_isValid, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_assertValid)
            {
                writer.WriteElementString("AssertValid", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_assertValid, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_getBrokenRules)
            {
                writer.WriteElementString("GetBrokenRules", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_getBrokenRules, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_clear)
            {
                writer.WriteElementString("Clear", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_clear, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_initialize)
            {
                writer.WriteElementString("Initialize", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_initialize, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_mergeFrom)
            {
                writer.WriteElementString("MergeFrom", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_mergeFrom, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_mergeTo)
            {
                writer.WriteElementString("MergeTo", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_mergeTo, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_readXml)
            {
                writer.WriteElementString("ReadXml", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_readXml, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_writeXml)
            {
                writer.WriteElementString("WriteXml", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_writeXml, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_typeFields)
            {
                writer.WriteElementString("TypeFields", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_typeFields, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        #endregion
    }
    #endregion
    #region SingleFields
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface ISingleFields : global::NClassify.Library.IMessage
    {
        bool HasBool { get; }
        bool Bool { get; }
        bool HasBytes { get; }
        global::NClassify.Library.ByteArray Bytes { get; }
        bool HasInt8 { get; }
        sbyte Int8 { get; }
        bool HasUint8 { get; }
        byte Uint8 { get; }
        bool HasInt16 { get; }
        short Int16 { get; }
        bool HasUint16 { get; }
        ushort Uint16 { get; }
        bool HasInt32 { get; }
        int Int32 { get; }
        bool HasUint32 { get; }
        uint Uint32 { get; }
        bool HasInt64 { get; }
        long Int64 { get; }
        bool HasUint64 { get; }
        ulong Uint64 { get; }
        bool HasFloat { get; }
        float Float { get; }
        bool HasDouble { get; }
        double Double { get; }
        bool HasGuid { get; }
        global::System.Guid Guid { get; }
        bool HasDateTime { get; }
        global::System.DateTime DateTime { get; }
        bool HasTimeSpan { get; }
        global::System.TimeSpan TimeSpan { get; }
        bool HasString { get; }
        string String { get; }
        bool HasEnum { get; }
        global::NClassify.Example.SampleEnum Enum { get; }
        bool HasSimpleInt32 { get; }
        global::NClassify.Example.SimpleInt32 SimpleInt32 { get; }
        bool HasSimpleUri { get; }
        global::NClassify.Example.SimpleUri SimpleUri { get; }
        bool HasSimpleText { get; }
        global::NClassify.Example.SimpleText SimpleText { get; }
        bool HasSimpleBytes { get; }
        global::NClassify.Example.SimpleBytes SimpleBytes { get; }
        bool HasSampleMsg { get; }
        global::NClassify.Example.SampleMsg SampleMsg { get; }
        bool HasISampleMsg { get; }
        global::NClassify.Example.ISampleMsg ISampleMsg { get; }
    }
    [global::System.Xml.Serialization.XmlType("SingleFields")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class SingleFields : ISingleFields, global::NClassify.Library.IBuilder
    {
        private static readonly SingleFields _defaultInstance = new SingleFields(false);
        public static SingleFields DefaultInstance { get { return _defaultInstance; } }
        static SingleFields()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected SingleFields(bool initalize)
        {
            if (initalize) Initialize();
        }
        public SingleFields() : this(true)
        {
        }
        public SingleFields(ISingleFields copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            Bool = 11,
            Bytes = 12,
            Int8 = 13,
            Uint8 = 14,
            Int16 = 15,
            Uint16 = 16,
            Int32 = 17,
            Uint32 = 18,
            Int64 = 19,
            Uint64 = 20,
            Float = 21,
            Double = 22,
            Guid = 23,
            DateTime = 24,
            TimeSpan = 25,
            String = 26,
            Enum = 27,
            SimpleInt32 = 28,
            SimpleUri = 29,
            SimpleText = 30,
            SimpleBytes = 31,
            SampleMsg = 32,
            ISampleMsg = 33,
        }
        #endregion
        #region Static Data
        public static bool IsValidString(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.String, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.String));
                return false;
            }
            return true;
        }
        public static bool IsValidSimpleInt32(global::NClassify.Example.SimpleInt32 value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.SimpleInt32, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidSimpleUri(global::NClassify.Example.SimpleUri value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.SimpleUri, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidSimpleText(global::NClassify.Example.SimpleText value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.SimpleText, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidSimpleBytes(global::NClassify.Example.SimpleBytes value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.SimpleBytes, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidSampleMsg(global::NClassify.Example.SampleMsg value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.SampleMsg, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.SampleMsg));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.SampleMsg, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidISampleMsg(global::NClassify.Example.ISampleMsg value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ISampleMsg, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.ISampleMsg));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ISampleMsg, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private bool __has_bool;
        private bool __fld_bool;
        private bool __has_bytes;
        private global::NClassify.Library.ByteArray __fld_bytes;
        private bool __has_int8;
        private sbyte __fld_int8;
        private bool __has_uint8;
        private byte __fld_uint8;
        private bool __has_int16;
        private short __fld_int16;
        private bool __has_uint16;
        private ushort __fld_uint16;
        private bool __has_int32;
        private int __fld_int32;
        private bool __has_uint32;
        private uint __fld_uint32;
        private bool __has_int64;
        private long __fld_int64;
        private bool __has_uint64;
        private ulong __fld_uint64;
        private bool __has_float;
        private float __fld_float;
        private bool __has_double;
        private double __fld_double;
        private bool __has_guid;
        private global::System.Guid __fld_guid;
        private bool __has_dateTime;
        private global::System.DateTime __fld_dateTime;
        private bool __has_timeSpan;
        private global::System.TimeSpan __fld_timeSpan;
        private bool __has_string;
        private string __fld_string;
        private bool __has_enum;
        private global::NClassify.Example.SampleEnum __fld_enum;
        private bool __has_simpleInt32;
        private global::NClassify.Example.SimpleInt32 __fld_simpleInt32;
        private bool __has_simpleUri;
        private global::NClassify.Example.SimpleUri __fld_simpleUri;
        private bool __has_simpleText;
        private global::NClassify.Example.SimpleText __fld_simpleText;
        private bool __has_simpleBytes;
        private global::NClassify.Example.SimpleBytes __fld_simpleBytes;
        private bool __has_sampleMsg;
        private global::NClassify.Example.SampleMsg __fld_sampleMsg;
        private bool __has_iSampleMsg;
        private global::NClassify.Example.ISampleMsg __fld_iSampleMsg;
        #endregion
        #region Instance Members
        public bool HasBool
        {
            get { return __has_bool; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_bool = true;
                __has_bool = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(true)]
        public bool Bool
        {
            get
            {
                return __fld_bool;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_bool = value;
                __has_bool = true;
            }
        }
        public bool HasBytes
        {
            get { return __has_bytes; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_bytes = global::System.Convert.FromBase64String("asdf");
                __has_bytes = false;
            }
        }
        public global::NClassify.Library.ByteArray Bytes
        {
            get
            {
                return __fld_bytes;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_bytes = value;
                __has_bytes = true;
            }
        }
        public bool HasInt8
        {
            get { return __has_int8; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_int8 = (sbyte)1;
                __has_int8 = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute((sbyte)1)]
        public sbyte Int8
        {
            get
            {
                return __fld_int8;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_int8 = value;
                __has_int8 = true;
            }
        }
        public bool HasUint8
        {
            get { return __has_uint8; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_uint8 = (byte)1u;
                __has_uint8 = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute((byte)1u)]
        public byte Uint8
        {
            get
            {
                return __fld_uint8;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_uint8 = value;
                __has_uint8 = true;
            }
        }
        public bool HasInt16
        {
            get { return __has_int16; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_int16 = (short)1;
                __has_int16 = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute((short)1)]
        public short Int16
        {
            get
            {
                return __fld_int16;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_int16 = value;
                __has_int16 = true;
            }
        }
        public bool HasUint16
        {
            get { return __has_uint16; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_uint16 = (ushort)1u;
                __has_uint16 = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute((ushort)1u)]
        public ushort Uint16
        {
            get
            {
                return __fld_uint16;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_uint16 = value;
                __has_uint16 = true;
            }
        }
        public bool HasInt32
        {
            get { return __has_int32; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_int32 = 1;
                __has_int32 = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(1)]
        public int Int32
        {
            get
            {
                return __fld_int32;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_int32 = value;
                __has_int32 = true;
            }
        }
        public bool HasUint32
        {
            get { return __has_uint32; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_uint32 = 1U;
                __has_uint32 = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(1U)]
        public uint Uint32
        {
            get
            {
                return __fld_uint32;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_uint32 = value;
                __has_uint32 = true;
            }
        }
        public bool HasInt64
        {
            get { return __has_int64; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_int64 = 1L;
                __has_int64 = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(1L)]
        public long Int64
        {
            get
            {
                return __fld_int64;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_int64 = value;
                __has_int64 = true;
            }
        }
        public bool HasUint64
        {
            get { return __has_uint64; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_uint64 = 1UL;
                __has_uint64 = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(1UL)]
        public ulong Uint64
        {
            get
            {
                return __fld_uint64;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_uint64 = value;
                __has_uint64 = true;
            }
        }
        public bool HasFloat
        {
            get { return __has_float; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_float = 1F;
                __has_float = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(1F)]
        public float Float
        {
            get
            {
                return __fld_float;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_float = value;
                __has_float = true;
            }
        }
        public bool HasDouble
        {
            get { return __has_double; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_double = 1D;
                __has_double = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(1D)]
        public double Double
        {
            get
            {
                return __fld_double;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_double = value;
                __has_double = true;
            }
        }
        public bool HasGuid
        {
            get { return __has_guid; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_guid = global::System.Guid.NewGuid();
                __has_guid = false;
            }
        }
        public global::System.Guid Guid
        {
            get
            {
                return __fld_guid;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_guid = value;
                __has_guid = true;
            }
        }
        public bool HasDateTime
        {
            get { return __has_dateTime; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateTime = global::System.DateTime.Now;
                __has_dateTime = false;
            }
        }
        public global::System.DateTime DateTime
        {
            get
            {
                return __fld_dateTime;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateTime = value;
                __has_dateTime = true;
            }
        }
        public bool HasTimeSpan
        {
            get { return __has_timeSpan; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_timeSpan = global::System.TimeSpan.Parse("1:00");
                __has_timeSpan = false;
            }
        }
        public global::System.TimeSpan TimeSpan
        {
            get
            {
                return __fld_timeSpan;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_timeSpan = value;
                __has_timeSpan = true;
            }
        }
        public bool HasString
        {
            get { return __has_string; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_string = "1";
                __has_string = false;
            }
        }
        public string String
        {
            get
            {
                return __fld_string;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("String");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_string = value;
                __has_string = true;
            }
        }
        public bool HasEnum
        {
            get { return __has_enum; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_enum = global::NClassify.Example.SampleEnum.Two;
                __has_enum = false;
            }
        }
        public global::NClassify.Example.SampleEnum Enum
        {
            get
            {
                return __fld_enum;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_enum = value;
                __has_enum = true;
            }
        }
        public bool HasSimpleInt32
        {
            get { return __has_simpleInt32; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_simpleInt32 = new global::NClassify.Example.SimpleInt32(2);
                __has_simpleInt32 = false;
            }
        }
        public global::NClassify.Example.SimpleInt32 SimpleInt32
        {
            get
            {
                return __fld_simpleInt32;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_simpleInt32 = value;
                __has_simpleInt32 = true;
            }
        }
        public bool HasSimpleUri
        {
            get { return __has_simpleUri; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_simpleUri = new global::NClassify.Example.SimpleUri("http://example.uri");
                __has_simpleUri = false;
            }
        }
        public global::NClassify.Example.SimpleUri SimpleUri
        {
            get
            {
                return __fld_simpleUri;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_simpleUri = value;
                __has_simpleUri = true;
            }
        }
        public bool HasSimpleText
        {
            get { return __has_simpleText; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_simpleText = new global::NClassify.Example.SimpleText("def");
                __has_simpleText = false;
            }
        }
        public global::NClassify.Example.SimpleText SimpleText
        {
            get
            {
                return __fld_simpleText;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_simpleText = value;
                __has_simpleText = true;
            }
        }
        public bool HasSimpleBytes
        {
            get { return __has_simpleBytes; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_simpleBytes = new global::NClassify.Example.SimpleBytes(global::System.Convert.FromBase64String("AsdF12=="));
                __has_simpleBytes = false;
            }
        }
        public global::NClassify.Example.SimpleBytes SimpleBytes
        {
            get
            {
                return __fld_simpleBytes;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_simpleBytes = value;
                __has_simpleBytes = true;
            }
        }
        public bool HasSampleMsg
        {
            get { return __has_sampleMsg; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_sampleMsg = global::NClassify.Example.SampleMsg.DefaultInstance;
                __has_sampleMsg = false;
            }
        }
        public global::NClassify.Example.SampleMsg SampleMsg
        {
            get
            {
                return __fld_sampleMsg;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("SampleMsg");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_sampleMsg = value;
                __has_sampleMsg = true;
            }
        }
        public bool HasISampleMsg
        {
            get { return __has_iSampleMsg; }
            set
            {
                if (value || IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_iSampleMsg = global::NClassify.Example.SampleMsg.DefaultInstance;
                __has_iSampleMsg = false;
            }
        }
        public global::NClassify.Example.ISampleMsg ISampleMsg
        {
            get
            {
                return __fld_iSampleMsg;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("ISampleMsg");
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_iSampleMsg = value;
                __has_iSampleMsg = true;
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            if (__has_string && !IsValidString(__fld_string, onError)) errorCount++;
            if (__has_simpleInt32 && !IsValidSimpleInt32(__fld_simpleInt32, onError)) errorCount++;
            if (__has_simpleUri && !IsValidSimpleUri(__fld_simpleUri, onError)) errorCount++;
            if (!__has_simpleText)
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.SimpleText, global::NClassify.Library.ResourceMessages.MissingRequiredField, TypeFields.SimpleText));
                errorCount++;
            }
            if (__has_simpleBytes && !IsValidSimpleBytes(__fld_simpleBytes, onError)) errorCount++;
            if (__has_sampleMsg && !IsValidSampleMsg(__fld_sampleMsg, onError)) errorCount++;
            if (__has_iSampleMsg && !IsValidISampleMsg(__fld_iSampleMsg, onError)) errorCount++;
            return errorCount;
        }
        public ISingleFields AsReadOnly()
        {
            if (_readOnly) return this;
            SingleFields copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            if (object.ReferenceEquals(this, _defaultInstance)) return;
            __fld_sampleMsg.MakeReadOnly();
            __fld_iSampleMsg = (__fld_iSampleMsg as global::NClassify.Example.SampleMsg) ?? new global::NClassify.Example.SampleMsg(__fld_iSampleMsg);
            ((global::NClassify.Example.SampleMsg)__fld_iSampleMsg).MakeReadOnly();
        }
        public virtual void AcceptDefaults()
        {
            __has_bool = true;
            __has_bytes = true;
            __has_int8 = true;
            __has_uint8 = true;
            __has_int16 = true;
            __has_uint16 = true;
            __has_int32 = true;
            __has_uint32 = true;
            __has_int64 = true;
            __has_uint64 = true;
            __has_float = true;
            __has_double = true;
            __has_guid = true;
            __has_dateTime = true;
            __has_timeSpan = true;
            __has_string = true;
            __has_enum = true;
            __has_simpleInt32 = true;
            __has_simpleUri = true;
            __has_simpleText = true;
            __has_simpleBytes = true;
            __has_sampleMsg = true;
            __has_iSampleMsg = true;
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __has_bool = false;
            __fld_bool = false;
            __has_bytes = false;
            __fld_bytes = new byte[0];
            __has_int8 = false;
            __fld_int8 = (sbyte)0;
            __has_uint8 = false;
            __fld_uint8 = (byte)0u;
            __has_int16 = false;
            __fld_int16 = (short)0;
            __has_uint16 = false;
            __fld_uint16 = (ushort)0u;
            __has_int32 = false;
            __fld_int32 = 0;
            __has_uint32 = false;
            __fld_uint32 = 0U;
            __has_int64 = false;
            __fld_int64 = 0L;
            __has_uint64 = false;
            __fld_uint64 = 0UL;
            __has_float = false;
            __fld_float = 0F;
            __has_double = false;
            __fld_double = 0D;
            __has_guid = false;
            __fld_guid = global::System.Guid.Empty;
            __has_dateTime = false;
            __fld_dateTime = global::System.DateTime.MinValue;
            __has_timeSpan = false;
            __fld_timeSpan = global::System.TimeSpan.Zero;
            __has_string = false;
            __fld_string = "";
            __has_enum = false;
            __fld_enum = default(global::NClassify.Example.SampleEnum);
            __has_simpleInt32 = false;
            __fld_simpleInt32 = new global::NClassify.Example.SimpleInt32(0);
            __has_simpleUri = false;
            __fld_simpleUri = new global::NClassify.Example.SimpleUri("");
            __has_simpleText = false;
            __fld_simpleText = new global::NClassify.Example.SimpleText("");
            __has_simpleBytes = false;
            __fld_simpleBytes = new global::NClassify.Example.SimpleBytes(new byte[0]);
            __has_sampleMsg = false;
            __fld_sampleMsg = global::NClassify.Example.SampleMsg.DefaultInstance;
            __has_iSampleMsg = false;
            __fld_iSampleMsg = global::NClassify.Example.SampleMsg.DefaultInstance;
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            SingleFields value = (SingleFields)base.MemberwiseClone();
            value.__fld_sampleMsg = (global::NClassify.Example.SampleMsg)value.__fld_sampleMsg.Clone();
            value.__fld_iSampleMsg = (global::NClassify.Example.ISampleMsg)value.__fld_iSampleMsg.Clone();
            return value;
        }
        public SingleFields Clone()
        {
            return (SingleFields)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ISingleFields) MergeFrom((ISingleFields)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(ISingleFields other)
        {
            if (other.HasBool) Bool = other.Bool;
            if (other.HasBytes) Bytes = other.Bytes;
            if (other.HasInt8) Int8 = other.Int8;
            if (other.HasUint8) Uint8 = other.Uint8;
            if (other.HasInt16) Int16 = other.Int16;
            if (other.HasUint16) Uint16 = other.Uint16;
            if (other.HasInt32) Int32 = other.Int32;
            if (other.HasUint32) Uint32 = other.Uint32;
            if (other.HasInt64) Int64 = other.Int64;
            if (other.HasUint64) Uint64 = other.Uint64;
            if (other.HasFloat) Float = other.Float;
            if (other.HasDouble) Double = other.Double;
            if (other.HasGuid) Guid = other.Guid;
            if (other.HasDateTime) DateTime = other.DateTime;
            if (other.HasTimeSpan) TimeSpan = other.TimeSpan;
            if (other.HasString) String = other.String;
            if (other.HasEnum) Enum = other.Enum;
            if (other.HasSimpleInt32) SimpleInt32 = other.SimpleInt32;
            if (other.HasSimpleUri) SimpleUri = other.SimpleUri;
            if (other.HasSimpleText) SimpleText = other.SimpleText;
            if (other.HasSimpleBytes) SimpleBytes = other.SimpleBytes;
            if (other.HasSampleMsg) SampleMsg = (global::NClassify.Example.SampleMsg)other.SampleMsg.Clone();
            if (other.HasISampleMsg) ISampleMsg = (global::NClassify.Example.ISampleMsg)other.ISampleMsg.Clone();
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "bool", "bytes", "dateTime", "double", "enum", "float", "guid", "i_sample_msg", "int16", "int32", "int64", "int8", "sample_msg", "simple_bytes", "simple_int32", "simple_text", "simple_uri", "string", "timeSpan", "uint16", "uint32", "uint64", "uint8" };
        private static readonly bool[] _isMessageFldIx = new bool[] { false, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("SingleFields", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 7:
                    {
                        global::NClassify.Example.SampleMsg value = (__fld_iSampleMsg as global::NClassify.Example.SampleMsg) ?? new global::NClassify.Example.SampleMsg(__fld_iSampleMsg);
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::NClassify.Example.SampleMsg.DefaultInstance) ? new global::NClassify.Example.SampleMsg() : new global::NClassify.Example.SampleMsg(__fld_iSampleMsg);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_iSampleMsg = value;
                        __has_iSampleMsg = true;
                        break;
                    }
                    case 12:
                    {
                        global::NClassify.Example.SampleMsg value = __fld_sampleMsg;
                        if (value.IsReadOnly())
                            value = object.ReferenceEquals(value, global::NClassify.Example.SampleMsg.DefaultInstance) ? new global::NClassify.Example.SampleMsg() : new global::NClassify.Example.SampleMsg(__fld_sampleMsg);
                        value.ReadXml(reader.LocalName, reader);
                        __fld_sampleMsg = value;
                        __has_sampleMsg = true;
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        __fld_bool = global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_bool = true;
                        break;
                    }
                    case 1:
                    {
                        __fld_bytes = global::NClassify.Library.TypeConverter.Instance.ParseBytes(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_bytes = true;
                        break;
                    }
                    case 2:
                    {
                        __fld_dateTime = global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd hh:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_dateTime = true;
                        break;
                    }
                    case 3:
                    {
                        __fld_double = global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_double = true;
                        break;
                    }
                    case 4:
                    {
                        __fld_enum = (global::NClassify.Example.SampleEnum)global::System.Enum.Parse(typeof(global::NClassify.Example.SampleEnum), sbuilder.ToString(), false);
                        __has_enum = true;
                        break;
                    }
                    case 5:
                    {
                        __fld_float = global::NClassify.Library.TypeConverter.Instance.ParseFloat(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_float = true;
                        break;
                    }
                    case 6:
                    {
                        __fld_guid = global::NClassify.Library.TypeConverter.Instance.ParseGuid(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_guid = true;
                        break;
                    }
                    case 8:
                    {
                        __fld_int16 = global::NClassify.Library.TypeConverter.Instance.ParseInt16(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_int16 = true;
                        break;
                    }
                    case 9:
                    {
                        __fld_int32 = global::NClassify.Library.TypeConverter.Instance.ParseInt32(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_int32 = true;
                        break;
                    }
                    case 10:
                    {
                        __fld_int64 = global::NClassify.Library.TypeConverter.Instance.ParseInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_int64 = true;
                        break;
                    }
                    case 11:
                    {
                        __fld_int8 = global::NClassify.Library.TypeConverter.Instance.ParseInt8(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_int8 = true;
                        break;
                    }
                    case 13:
                    {
                        __fld_simpleBytes = new global::NClassify.Example.SimpleBytes(global::NClassify.Library.TypeConverter.Instance.ParseBytes(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                        __has_simpleBytes = true;
                        break;
                    }
                    case 14:
                    {
                        __fld_simpleInt32 = new global::NClassify.Example.SimpleInt32(global::NClassify.Library.TypeConverter.Instance.ParseInt32(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                        __has_simpleInt32 = true;
                        break;
                    }
                    case 15:
                    {
                        __fld_simpleText = new global::NClassify.Example.SimpleText(sbuilder.ToString());
                        __has_simpleText = true;
                        break;
                    }
                    case 16:
                    {
                        __fld_simpleUri = new global::NClassify.Example.SimpleUri(sbuilder.ToString());
                        __has_simpleUri = true;
                        break;
                    }
                    case 17:
                    {
                        __fld_string = sbuilder.ToString();
                        __has_string = true;
                        break;
                    }
                    case 18:
                    {
                        __fld_timeSpan = global::NClassify.Library.TypeConverter.Instance.ParseTimeSpan(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_timeSpan = true;
                        break;
                    }
                    case 19:
                    {
                        __fld_uint16 = global::NClassify.Library.TypeConverter.Instance.ParseUInt16(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_uint16 = true;
                        break;
                    }
                    case 20:
                    {
                        __fld_uint32 = global::NClassify.Library.TypeConverter.Instance.ParseUInt32(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_uint32 = true;
                        break;
                    }
                    case 21:
                    {
                        __fld_uint64 = global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_uint64 = true;
                        break;
                    }
                    case 22:
                    {
                        __fld_uint8 = global::NClassify.Library.TypeConverter.Instance.ParseUInt8(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture);
                        __has_uint8 = true;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("SingleFields", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            if (__has_bool)
            {
                writer.WriteElementString("bool", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_bool, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_bytes)
            {
                writer.WriteElementString("bytes", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_bytes, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_int8)
            {
                writer.WriteElementString("int8", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_int8, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_uint8)
            {
                writer.WriteElementString("uint8", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_uint8, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_int16)
            {
                writer.WriteElementString("int16", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_int16, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_uint16)
            {
                writer.WriteElementString("uint16", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_uint16, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_int32)
            {
                writer.WriteElementString("int32", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_int32, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_uint32)
            {
                writer.WriteElementString("uint32", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_uint32, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_int64)
            {
                writer.WriteElementString("int64", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_int64, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_uint64)
            {
                writer.WriteElementString("uint64", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_uint64, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_float)
            {
                writer.WriteElementString("float", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_float, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_double)
            {
                writer.WriteElementString("double", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_double, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_guid)
            {
                writer.WriteElementString("guid", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_guid, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_dateTime)
            {
                writer.WriteElementString("dateTime", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_dateTime, "yyyy-MM-dd hh:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_timeSpan)
            {
                writer.WriteElementString("timeSpan", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_timeSpan, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_string)
            {
                writer.WriteElementString("string", __fld_string);
            }
            if (__has_enum)
            {
                writer.WriteElementString("enum", __fld_enum.ToString());
            }
            if (__has_simpleInt32)
            {
                writer.WriteElementString("simple_int32", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_simpleInt32.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_simpleUri)
            {
                writer.WriteElementString("simple_uri", __fld_simpleUri.Value);
            }
            if (__has_simpleText)
            {
                writer.WriteElementString("simple_text", __fld_simpleText.Value);
            }
            if (__has_simpleBytes)
            {
                writer.WriteElementString("simple_bytes", global::NClassify.Library.TypeConverter.Instance.ToString(__fld_simpleBytes.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            if (__has_sampleMsg)
            {
                __fld_sampleMsg.WriteXml("sample_msg", writer);
            }
            if (__has_iSampleMsg)
            {
                __fld_iSampleMsg.WriteXml("i_sample_msg", writer);
            }
        }
        #endregion
    }
    #endregion
    #region ArrayFields
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IArrayFields : global::NClassify.Library.IMessage
    {
        global::System.Collections.Generic.IList<bool> BoolList { get; }
        global::System.Collections.Generic.IList<global::NClassify.Library.ByteArray> BytesList { get; }
        global::System.Collections.Generic.IList<sbyte> Int8List { get; }
        global::System.Collections.Generic.IList<byte> Uint8List { get; }
        global::System.Collections.Generic.IList<short> Int16List { get; }
        global::System.Collections.Generic.IList<ushort> Uint16List { get; }
        global::System.Collections.Generic.IList<int> Int32List { get; }
        global::System.Collections.Generic.IList<uint> Uint32List { get; }
        global::System.Collections.Generic.IList<long> Int64List { get; }
        global::System.Collections.Generic.IList<ulong> Uint64List { get; }
        global::System.Collections.Generic.IList<float> FloatList { get; }
        global::System.Collections.Generic.IList<double> DoubleList { get; }
        global::System.Collections.Generic.IList<global::System.Guid> GuidList { get; }
        global::System.Collections.Generic.IList<global::System.DateTime> DateTimeList { get; }
        global::System.Collections.Generic.IList<global::System.TimeSpan> TimeSpanList { get; }
        global::System.Collections.Generic.IList<string> StringList { get; }
        global::System.Collections.Generic.IList<global::NClassify.Example.SampleEnum> EnumList { get; }
        global::System.Collections.Generic.IList<global::NClassify.Example.SimpleInt32> SimpleInt32List { get; }
        global::System.Collections.Generic.IList<global::NClassify.Example.SimpleUri> SimpleUriList { get; }
        global::System.Collections.Generic.IList<global::NClassify.Example.SimpleText> SimpleTextList { get; }
        global::System.Collections.Generic.IList<global::NClassify.Example.SimpleBytes> SimpleBytesList { get; }
        global::System.Collections.Generic.IList<global::NClassify.Example.SampleMsg> SampleMsgList { get; }
        global::System.Collections.Generic.IList<global::NClassify.Example.ISampleMsg> ISampleMsgList { get; }
    }
    [global::System.Xml.Serialization.XmlType("ArrayFields")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ArrayFields : IArrayFields, global::NClassify.Library.IBuilder
    {
        private static readonly ArrayFields _defaultInstance = new ArrayFields(false);
        public static ArrayFields DefaultInstance { get { return _defaultInstance; } }
        static ArrayFields()
        {
            _defaultInstance.Clear();
            _defaultInstance.MakeReadOnly();
        }
        protected ArrayFields(bool initalize)
        {
            if (initalize) Initialize();
        }
        public ArrayFields() : this(true)
        {
        }
        public ArrayFields(IArrayFields copyFrom) : this(true)
        {
            MergeFrom(copyFrom);
        }
        #region TypeFields
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public enum TypeFields
        {
            BoolList = 11,
            BytesList = 12,
            Int8List = 13,
            Uint8List = 14,
            Int16List = 15,
            Uint16List = 16,
            Int32List = 17,
            Uint32List = 18,
            Int64List = 19,
            Uint64List = 20,
            FloatList = 21,
            DoubleList = 22,
            GuidList = 23,
            DateTimeList = 24,
            TimeSpanList = 25,
            StringList = 26,
            EnumList = 27,
            SimpleInt32List = 28,
            SimpleUriList = 29,
            SimpleTextList = 30,
            SimpleBytesList = 31,
            SampleMsgList = 32,
            ISampleMsgList = 33,
        }
        #endregion
        #region _BoolList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _BoolList : global::System.Collections.Generic.IList<bool>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("BoolList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<bool> _contents;
            public _BoolList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<bool>();
            }
            public _BoolList(global::System.Collections.Generic.IList<bool> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<bool>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<bool> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public bool this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(bool value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<bool> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, bool value) { Modify.Insert(index, value); }
            public bool Remove(bool item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(bool item) { return _contents.Contains(item); }
            public int IndexOf(bool item) { return _contents.IndexOf(item); }
            public void CopyTo(bool[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _BoolList Clone()
            {
                return _readOnly ? this : new _BoolList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<bool> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _BytesList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _BytesList : global::System.Collections.Generic.IList<global::NClassify.Library.ByteArray>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("BytesList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::NClassify.Library.ByteArray> _contents;
            public _BytesList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Library.ByteArray>();
            }
            public _BytesList(global::System.Collections.Generic.IList<global::NClassify.Library.ByteArray> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Library.ByteArray>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<global::NClassify.Library.ByteArray> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::NClassify.Library.ByteArray this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::NClassify.Library.ByteArray value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::NClassify.Library.ByteArray> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::NClassify.Library.ByteArray value) { Modify.Insert(index, value); }
            public bool Remove(global::NClassify.Library.ByteArray item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::NClassify.Library.ByteArray item) { return _contents.Contains(item); }
            public int IndexOf(global::NClassify.Library.ByteArray item) { return _contents.IndexOf(item); }
            public void CopyTo(global::NClassify.Library.ByteArray[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _BytesList Clone()
            {
                return _readOnly ? this : new _BytesList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::NClassify.Library.ByteArray> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _Int8List
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _Int8List : global::System.Collections.Generic.IList<sbyte>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("Int8List");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<sbyte> _contents;
            public _Int8List()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<sbyte>();
            }
            public _Int8List(global::System.Collections.Generic.IList<sbyte> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<sbyte>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<sbyte> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public sbyte this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(sbyte value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<sbyte> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, sbyte value) { Modify.Insert(index, value); }
            public bool Remove(sbyte item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(sbyte item) { return _contents.Contains(item); }
            public int IndexOf(sbyte item) { return _contents.IndexOf(item); }
            public void CopyTo(sbyte[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _Int8List Clone()
            {
                return _readOnly ? this : new _Int8List(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<sbyte> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _Uint8List
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _Uint8List : global::System.Collections.Generic.IList<byte>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("Uint8List");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<byte> _contents;
            public _Uint8List()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<byte>();
            }
            public _Uint8List(global::System.Collections.Generic.IList<byte> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<byte>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<byte> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public byte this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(byte value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<byte> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, byte value) { Modify.Insert(index, value); }
            public bool Remove(byte item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(byte item) { return _contents.Contains(item); }
            public int IndexOf(byte item) { return _contents.IndexOf(item); }
            public void CopyTo(byte[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _Uint8List Clone()
            {
                return _readOnly ? this : new _Uint8List(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<byte> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _Int16List
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _Int16List : global::System.Collections.Generic.IList<short>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("Int16List");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<short> _contents;
            public _Int16List()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<short>();
            }
            public _Int16List(global::System.Collections.Generic.IList<short> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<short>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<short> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public short this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(short value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<short> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, short value) { Modify.Insert(index, value); }
            public bool Remove(short item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(short item) { return _contents.Contains(item); }
            public int IndexOf(short item) { return _contents.IndexOf(item); }
            public void CopyTo(short[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _Int16List Clone()
            {
                return _readOnly ? this : new _Int16List(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<short> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _Uint16List
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _Uint16List : global::System.Collections.Generic.IList<ushort>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("Uint16List");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<ushort> _contents;
            public _Uint16List()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<ushort>();
            }
            public _Uint16List(global::System.Collections.Generic.IList<ushort> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<ushort>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<ushort> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public ushort this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(ushort value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<ushort> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, ushort value) { Modify.Insert(index, value); }
            public bool Remove(ushort item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(ushort item) { return _contents.Contains(item); }
            public int IndexOf(ushort item) { return _contents.IndexOf(item); }
            public void CopyTo(ushort[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _Uint16List Clone()
            {
                return _readOnly ? this : new _Uint16List(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<ushort> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _Int32List
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _Int32List : global::System.Collections.Generic.IList<int>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("Int32List");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<int> _contents;
            public _Int32List()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<int>();
            }
            public _Int32List(global::System.Collections.Generic.IList<int> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<int>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<int> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public int this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(int value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<int> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, int value) { Modify.Insert(index, value); }
            public bool Remove(int item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(int item) { return _contents.Contains(item); }
            public int IndexOf(int item) { return _contents.IndexOf(item); }
            public void CopyTo(int[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _Int32List Clone()
            {
                return _readOnly ? this : new _Int32List(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<int> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _Uint32List
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _Uint32List : global::System.Collections.Generic.IList<uint>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("Uint32List");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<uint> _contents;
            public _Uint32List()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<uint>();
            }
            public _Uint32List(global::System.Collections.Generic.IList<uint> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<uint>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<uint> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public uint this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(uint value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<uint> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, uint value) { Modify.Insert(index, value); }
            public bool Remove(uint item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(uint item) { return _contents.Contains(item); }
            public int IndexOf(uint item) { return _contents.IndexOf(item); }
            public void CopyTo(uint[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _Uint32List Clone()
            {
                return _readOnly ? this : new _Uint32List(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<uint> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _Int64List
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _Int64List : global::System.Collections.Generic.IList<long>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("Int64List");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<long> _contents;
            public _Int64List()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<long>();
            }
            public _Int64List(global::System.Collections.Generic.IList<long> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<long>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<long> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public long this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(long value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<long> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, long value) { Modify.Insert(index, value); }
            public bool Remove(long item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(long item) { return _contents.Contains(item); }
            public int IndexOf(long item) { return _contents.IndexOf(item); }
            public void CopyTo(long[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _Int64List Clone()
            {
                return _readOnly ? this : new _Int64List(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<long> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _Uint64List
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _Uint64List : global::System.Collections.Generic.IList<ulong>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("Uint64List");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<ulong> _contents;
            public _Uint64List()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<ulong>();
            }
            public _Uint64List(global::System.Collections.Generic.IList<ulong> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<ulong>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<ulong> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public ulong this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(ulong value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<ulong> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, ulong value) { Modify.Insert(index, value); }
            public bool Remove(ulong item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(ulong item) { return _contents.Contains(item); }
            public int IndexOf(ulong item) { return _contents.IndexOf(item); }
            public void CopyTo(ulong[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _Uint64List Clone()
            {
                return _readOnly ? this : new _Uint64List(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<ulong> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _FloatList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _FloatList : global::System.Collections.Generic.IList<float>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("FloatList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<float> _contents;
            public _FloatList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<float>();
            }
            public _FloatList(global::System.Collections.Generic.IList<float> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<float>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<float> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public float this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(float value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<float> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, float value) { Modify.Insert(index, value); }
            public bool Remove(float item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(float item) { return _contents.Contains(item); }
            public int IndexOf(float item) { return _contents.IndexOf(item); }
            public void CopyTo(float[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _FloatList Clone()
            {
                return _readOnly ? this : new _FloatList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<float> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _DoubleList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _DoubleList : global::System.Collections.Generic.IList<double>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("DoubleList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<double> _contents;
            public _DoubleList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<double>();
            }
            public _DoubleList(global::System.Collections.Generic.IList<double> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<double>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<double> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public double this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(double value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<double> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, double value) { Modify.Insert(index, value); }
            public bool Remove(double item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(double item) { return _contents.Contains(item); }
            public int IndexOf(double item) { return _contents.IndexOf(item); }
            public void CopyTo(double[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _DoubleList Clone()
            {
                return _readOnly ? this : new _DoubleList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<double> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _GuidList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _GuidList : global::System.Collections.Generic.IList<global::System.Guid>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("GuidList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::System.Guid> _contents;
            public _GuidList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::System.Guid>();
            }
            public _GuidList(global::System.Collections.Generic.IList<global::System.Guid> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::System.Guid>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<global::System.Guid> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::System.Guid this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::System.Guid value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::System.Guid> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::System.Guid value) { Modify.Insert(index, value); }
            public bool Remove(global::System.Guid item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::System.Guid item) { return _contents.Contains(item); }
            public int IndexOf(global::System.Guid item) { return _contents.IndexOf(item); }
            public void CopyTo(global::System.Guid[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _GuidList Clone()
            {
                return _readOnly ? this : new _GuidList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::System.Guid> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _DateTimeList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _DateTimeList : global::System.Collections.Generic.IList<global::System.DateTime>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("DateTimeList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::System.DateTime> _contents;
            public _DateTimeList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::System.DateTime>();
            }
            public _DateTimeList(global::System.Collections.Generic.IList<global::System.DateTime> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::System.DateTime>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<global::System.DateTime> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::System.DateTime this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::System.DateTime value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::System.DateTime> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::System.DateTime value) { Modify.Insert(index, value); }
            public bool Remove(global::System.DateTime item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::System.DateTime item) { return _contents.Contains(item); }
            public int IndexOf(global::System.DateTime item) { return _contents.IndexOf(item); }
            public void CopyTo(global::System.DateTime[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _DateTimeList Clone()
            {
                return _readOnly ? this : new _DateTimeList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::System.DateTime> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _TimeSpanList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _TimeSpanList : global::System.Collections.Generic.IList<global::System.TimeSpan>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("TimeSpanList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::System.TimeSpan> _contents;
            public _TimeSpanList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::System.TimeSpan>();
            }
            public _TimeSpanList(global::System.Collections.Generic.IList<global::System.TimeSpan> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::System.TimeSpan>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<global::System.TimeSpan> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::System.TimeSpan this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::System.TimeSpan value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::System.TimeSpan> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::System.TimeSpan value) { Modify.Insert(index, value); }
            public bool Remove(global::System.TimeSpan item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::System.TimeSpan item) { return _contents.Contains(item); }
            public int IndexOf(global::System.TimeSpan item) { return _contents.IndexOf(item); }
            public void CopyTo(global::System.TimeSpan[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _TimeSpanList Clone()
            {
                return _readOnly ? this : new _TimeSpanList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::System.TimeSpan> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _StringList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _StringList : global::System.Collections.Generic.IList<string>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("StringList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<string> _contents;
            public _StringList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<string>();
            }
            public _StringList(global::System.Collections.Generic.IList<string> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<string>(AssertNotNull(contents).Count);
                foreach (string item in contents)
                {
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<string> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public string this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(string value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<string> value)
            {
                foreach (string item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, string value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(string item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(string item) { return _contents.Contains(item); }
            public int IndexOf(string item) { return _contents.IndexOf(item); }
            public void CopyTo(string[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _StringList Clone()
            {
                return _readOnly ? this : new _StringList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<string> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _EnumList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _EnumList : global::System.Collections.Generic.IList<global::NClassify.Example.SampleEnum>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("EnumList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::NClassify.Example.SampleEnum> _contents;
            public _EnumList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SampleEnum>();
            }
            public _EnumList(global::System.Collections.Generic.IList<global::NClassify.Example.SampleEnum> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SampleEnum>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<global::NClassify.Example.SampleEnum> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::NClassify.Example.SampleEnum this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::NClassify.Example.SampleEnum value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::NClassify.Example.SampleEnum> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::NClassify.Example.SampleEnum value) { Modify.Insert(index, value); }
            public bool Remove(global::NClassify.Example.SampleEnum item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::NClassify.Example.SampleEnum item) { return _contents.Contains(item); }
            public int IndexOf(global::NClassify.Example.SampleEnum item) { return _contents.IndexOf(item); }
            public void CopyTo(global::NClassify.Example.SampleEnum[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _EnumList Clone()
            {
                return _readOnly ? this : new _EnumList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::NClassify.Example.SampleEnum> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _SimpleInt32List
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _SimpleInt32List : global::System.Collections.Generic.IList<global::NClassify.Example.SimpleInt32>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("SimpleInt32List");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::NClassify.Example.SimpleInt32> _contents;
            public _SimpleInt32List()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SimpleInt32>();
            }
            public _SimpleInt32List(global::System.Collections.Generic.IList<global::NClassify.Example.SimpleInt32> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SimpleInt32>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<global::NClassify.Example.SimpleInt32> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::NClassify.Example.SimpleInt32 this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::NClassify.Example.SimpleInt32 value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::NClassify.Example.SimpleInt32> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::NClassify.Example.SimpleInt32 value) { Modify.Insert(index, value); }
            public bool Remove(global::NClassify.Example.SimpleInt32 item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::NClassify.Example.SimpleInt32 item) { return _contents.Contains(item); }
            public int IndexOf(global::NClassify.Example.SimpleInt32 item) { return _contents.IndexOf(item); }
            public void CopyTo(global::NClassify.Example.SimpleInt32[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _SimpleInt32List Clone()
            {
                return _readOnly ? this : new _SimpleInt32List(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::NClassify.Example.SimpleInt32> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _SimpleUriList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _SimpleUriList : global::System.Collections.Generic.IList<global::NClassify.Example.SimpleUri>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("SimpleUriList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::NClassify.Example.SimpleUri> _contents;
            public _SimpleUriList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SimpleUri>();
            }
            public _SimpleUriList(global::System.Collections.Generic.IList<global::NClassify.Example.SimpleUri> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SimpleUri>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<global::NClassify.Example.SimpleUri> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::NClassify.Example.SimpleUri this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::NClassify.Example.SimpleUri value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::NClassify.Example.SimpleUri> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::NClassify.Example.SimpleUri value) { Modify.Insert(index, value); }
            public bool Remove(global::NClassify.Example.SimpleUri item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::NClassify.Example.SimpleUri item) { return _contents.Contains(item); }
            public int IndexOf(global::NClassify.Example.SimpleUri item) { return _contents.IndexOf(item); }
            public void CopyTo(global::NClassify.Example.SimpleUri[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _SimpleUriList Clone()
            {
                return _readOnly ? this : new _SimpleUriList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::NClassify.Example.SimpleUri> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _SimpleTextList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _SimpleTextList : global::System.Collections.Generic.IList<global::NClassify.Example.SimpleText>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("SimpleTextList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::NClassify.Example.SimpleText> _contents;
            public _SimpleTextList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SimpleText>();
            }
            public _SimpleTextList(global::System.Collections.Generic.IList<global::NClassify.Example.SimpleText> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SimpleText>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<global::NClassify.Example.SimpleText> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::NClassify.Example.SimpleText this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::NClassify.Example.SimpleText value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::NClassify.Example.SimpleText> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::NClassify.Example.SimpleText value) { Modify.Insert(index, value); }
            public bool Remove(global::NClassify.Example.SimpleText item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::NClassify.Example.SimpleText item) { return _contents.Contains(item); }
            public int IndexOf(global::NClassify.Example.SimpleText item) { return _contents.IndexOf(item); }
            public void CopyTo(global::NClassify.Example.SimpleText[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _SimpleTextList Clone()
            {
                return _readOnly ? this : new _SimpleTextList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::NClassify.Example.SimpleText> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _SimpleBytesList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _SimpleBytesList : global::System.Collections.Generic.IList<global::NClassify.Example.SimpleBytes>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("SimpleBytesList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::NClassify.Example.SimpleBytes> _contents;
            public _SimpleBytesList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SimpleBytes>();
            }
            public _SimpleBytesList(global::System.Collections.Generic.IList<global::NClassify.Example.SimpleBytes> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SimpleBytes>(AssertNotNull(contents));
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
            }
            private global::System.Collections.Generic.List<global::NClassify.Example.SimpleBytes> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::NClassify.Example.SimpleBytes this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::NClassify.Example.SimpleBytes value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::NClassify.Example.SimpleBytes> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::NClassify.Example.SimpleBytes value) { Modify.Insert(index, value); }
            public bool Remove(global::NClassify.Example.SimpleBytes item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::NClassify.Example.SimpleBytes item) { return _contents.Contains(item); }
            public int IndexOf(global::NClassify.Example.SimpleBytes item) { return _contents.IndexOf(item); }
            public void CopyTo(global::NClassify.Example.SimpleBytes[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _SimpleBytesList Clone()
            {
                return _readOnly ? this : new _SimpleBytesList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::NClassify.Example.SimpleBytes> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _SampleMsgList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _SampleMsgList : global::System.Collections.Generic.IList<global::NClassify.Example.SampleMsg>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("SampleMsgList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::NClassify.Example.SampleMsg> _contents;
            public _SampleMsgList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SampleMsg>();
            }
            public _SampleMsgList(global::System.Collections.Generic.IList<global::NClassify.Example.SampleMsg> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SampleMsg>(AssertNotNull(contents).Count);
                foreach (global::NClassify.Example.SampleMsg item in contents)
                {
                    if (clone)
                        _contents.Add((global::NClassify.Example.SampleMsg)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i].MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::NClassify.Example.SampleMsg> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::NClassify.Example.SampleMsg this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::NClassify.Example.SampleMsg value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::NClassify.Example.SampleMsg> value)
            {
                foreach (global::NClassify.Example.SampleMsg item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::NClassify.Example.SampleMsg value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::NClassify.Example.SampleMsg item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::NClassify.Example.SampleMsg item) { return _contents.Contains(item); }
            public int IndexOf(global::NClassify.Example.SampleMsg item) { return _contents.IndexOf(item); }
            public void CopyTo(global::NClassify.Example.SampleMsg[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _SampleMsgList Clone()
            {
                return _readOnly ? this : new _SampleMsgList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::NClassify.Example.SampleMsg> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _ISampleMsgList
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        partial class _ISampleMsgList : global::System.Collections.Generic.IList<global::NClassify.Example.ISampleMsg>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("ISampleMsgList");
                return value;
            }
            private bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::NClassify.Example.ISampleMsg> _contents;
            public _ISampleMsgList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.ISampleMsg>();
            }
            public _ISampleMsgList(global::System.Collections.Generic.IList<global::NClassify.Example.ISampleMsg> contents, bool clone)
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.ISampleMsg>(AssertNotNull(contents).Count);
                foreach (global::NClassify.Example.ISampleMsg item in contents)
                {
                    if (clone)
                        _contents.Add((global::NClassify.Example.ISampleMsg)AssertNotNull(item).Clone());
                    else
                    _contents.Add(AssertNotNull(item));
                }
            }
            public void MakeReadOnly()
            {
                if (_readOnly) return;
                _readOnly = true;
                for (int i=0; i < _contents.Count; i++)
                {
                    _contents[i] = (_contents[i] as global::NClassify.Example.SampleMsg) ?? new global::NClassify.Example.SampleMsg(_contents[i]);
                    ((global::NClassify.Example.SampleMsg)_contents[i]).MakeReadOnly();
                }
            }
            private global::System.Collections.Generic.List<global::NClassify.Example.ISampleMsg> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::NClassify.Example.ISampleMsg this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::NClassify.Example.ISampleMsg value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::NClassify.Example.ISampleMsg> value)
            {
                foreach (global::NClassify.Example.ISampleMsg item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::NClassify.Example.ISampleMsg value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::NClassify.Example.ISampleMsg item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::NClassify.Example.ISampleMsg item) { return _contents.Contains(item); }
            public int IndexOf(global::NClassify.Example.ISampleMsg item) { return _contents.IndexOf(item); }
            public void CopyTo(global::NClassify.Example.ISampleMsg[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _ISampleMsgList Clone()
            {
                return _readOnly ? this : new _ISampleMsgList(this, true);
            }
            public global::System.Collections.Generic.IEnumerator<global::NClassify.Example.ISampleMsg> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidStringList(string value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.StringList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.StringList));
                return false;
            }
            return true;
        }
        public static bool IsValidSimpleInt32List(global::NClassify.Example.SimpleInt32 value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.SimpleInt32List, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidSimpleUriList(global::NClassify.Example.SimpleUri value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.SimpleUriList, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidSimpleTextList(global::NClassify.Example.SimpleText value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.SimpleTextList, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidSimpleBytesList(global::NClassify.Example.SimpleBytes value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.SimpleBytesList, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidSampleMsgList(global::NClassify.Example.SampleMsg value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.SampleMsgList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.SampleMsgList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.SampleMsgList, errors));
                return false;
            }
            return true;
        }
        public static bool IsValidISampleMsgList(global::NClassify.Example.ISampleMsg value, global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            if (object.ReferenceEquals(null, value))
            {
                if (onError != null) onError(new global::NClassify.Library.ValidationError(TypeFields.ISampleMsgList, global::NClassify.Library.ResourceMessages.MustNotBeNull, TypeFields.ISampleMsgList));
                return false;
            }
            if (!value.IsValid())
            {
                if (onError == null)
                    return false;
                global::System.Collections.Generic.List<global::NClassify.Library.ValidationError> errors = new global::System.Collections.Generic.List<global::NClassify.Library.ValidationError>();
                value.GetBrokenRules(errors.Add);
                onError(new global::NClassify.Library.ValidationError(TypeFields.ISampleMsgList, errors));
                return false;
            }
            return true;
        }
        #endregion
        #region Instance Fields
        private bool _readOnly;
        private _BoolList __fld_bool;
        private _BytesList __fld_bytes;
        private _Int8List __fld_int8;
        private _Uint8List __fld_uint8;
        private _Int16List __fld_int16;
        private _Uint16List __fld_uint16;
        private _Int32List __fld_int32;
        private _Uint32List __fld_uint32;
        private _Int64List __fld_int64;
        private _Uint64List __fld_uint64;
        private _FloatList __fld_float;
        private _DoubleList __fld_double;
        private _GuidList __fld_guid;
        private _DateTimeList __fld_dateTime;
        private _TimeSpanList __fld_timeSpan;
        private _StringList __fld_string;
        private _EnumList __fld_enum;
        private _SimpleInt32List __fld_simpleInt32;
        private _SimpleUriList __fld_simpleUri;
        private _SimpleTextList __fld_simpleText;
        private _SimpleBytesList __fld_simpleBytes;
        private _SampleMsgList __fld_sampleMsg;
        private _ISampleMsgList __fld_iSampleMsg;
        #endregion
        #region Instance Members
        public global::System.Collections.Generic.IList<bool> BoolList
        {
            get
            {
                return __fld_bool;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_bool = new _BoolList(value, false);
            }
        }
        public global::System.Collections.Generic.IList<global::NClassify.Library.ByteArray> BytesList
        {
            get
            {
                return __fld_bytes;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_bytes = new _BytesList(value, false);
            }
        }
        public global::System.Collections.Generic.IList<sbyte> Int8List
        {
            get
            {
                return __fld_int8;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_int8 = new _Int8List(value, false);
            }
        }
        public global::System.Collections.Generic.IList<byte> Uint8List
        {
            get
            {
                return __fld_uint8;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_uint8 = new _Uint8List(value, false);
            }
        }
        public global::System.Collections.Generic.IList<short> Int16List
        {
            get
            {
                return __fld_int16;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_int16 = new _Int16List(value, false);
            }
        }
        public global::System.Collections.Generic.IList<ushort> Uint16List
        {
            get
            {
                return __fld_uint16;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_uint16 = new _Uint16List(value, false);
            }
        }
        public global::System.Collections.Generic.IList<int> Int32List
        {
            get
            {
                return __fld_int32;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_int32 = new _Int32List(value, false);
            }
        }
        public global::System.Collections.Generic.IList<uint> Uint32List
        {
            get
            {
                return __fld_uint32;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_uint32 = new _Uint32List(value, false);
            }
        }
        public global::System.Collections.Generic.IList<long> Int64List
        {
            get
            {
                return __fld_int64;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_int64 = new _Int64List(value, false);
            }
        }
        public global::System.Collections.Generic.IList<ulong> Uint64List
        {
            get
            {
                return __fld_uint64;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_uint64 = new _Uint64List(value, false);
            }
        }
        public global::System.Collections.Generic.IList<float> FloatList
        {
            get
            {
                return __fld_float;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_float = new _FloatList(value, false);
            }
        }
        public global::System.Collections.Generic.IList<double> DoubleList
        {
            get
            {
                return __fld_double;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_double = new _DoubleList(value, false);
            }
        }
        public global::System.Collections.Generic.IList<global::System.Guid> GuidList
        {
            get
            {
                return __fld_guid;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_guid = new _GuidList(value, false);
            }
        }
        public global::System.Collections.Generic.IList<global::System.DateTime> DateTimeList
        {
            get
            {
                return __fld_dateTime;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_dateTime = new _DateTimeList(value, false);
            }
        }
        public global::System.Collections.Generic.IList<global::System.TimeSpan> TimeSpanList
        {
            get
            {
                return __fld_timeSpan;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_timeSpan = new _TimeSpanList(value, false);
            }
        }
        public global::System.Collections.Generic.IList<string> StringList
        {
            get
            {
                return __fld_string;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_string = new _StringList(value, false);
            }
        }
        public global::System.Collections.Generic.IList<global::NClassify.Example.SampleEnum> EnumList
        {
            get
            {
                return __fld_enum;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_enum = new _EnumList(value, false);
            }
        }
        public global::System.Collections.Generic.IList<global::NClassify.Example.SimpleInt32> SimpleInt32List
        {
            get
            {
                return __fld_simpleInt32;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_simpleInt32 = new _SimpleInt32List(value, false);
            }
        }
        public global::System.Collections.Generic.IList<global::NClassify.Example.SimpleUri> SimpleUriList
        {
            get
            {
                return __fld_simpleUri;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_simpleUri = new _SimpleUriList(value, false);
            }
        }
        public global::System.Collections.Generic.IList<global::NClassify.Example.SimpleText> SimpleTextList
        {
            get
            {
                return __fld_simpleText;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_simpleText = new _SimpleTextList(value, false);
            }
        }
        public global::System.Collections.Generic.IList<global::NClassify.Example.SimpleBytes> SimpleBytesList
        {
            get
            {
                return __fld_simpleBytes;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_simpleBytes = new _SimpleBytesList(value, false);
            }
        }
        public global::System.Collections.Generic.IList<global::NClassify.Example.SampleMsg> SampleMsgList
        {
            get
            {
                return __fld_sampleMsg;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_sampleMsg = new _SampleMsgList(value, false);
            }
        }
        public global::System.Collections.Generic.IList<global::NClassify.Example.ISampleMsg> ISampleMsgList
        {
            get
            {
                return __fld_iSampleMsg;
            }
            set
            {
                if (IsReadOnly()) throw new global::System.InvalidOperationException();
                __fld_iSampleMsg = new _ISampleMsgList(value, false);
            }
        }
        public bool IsValid() { return 0 == GetBrokenRules(null); }
        public void AssertValid() { GetBrokenRules(RaiseValidationError); }
        void RaiseValidationError(global::NClassify.Library.ValidationError e) { e.RaiseException(); }
        public virtual int GetBrokenRules(global::System.Action<global::NClassify.Library.ValidationError> onError)
        {
            int errorCount = 0;
            foreach (string item in __fld_string)
            {
                if (!IsValidStringList(item, onError)) errorCount++;
            }
            foreach (global::NClassify.Example.SimpleInt32 item in __fld_simpleInt32)
            {
                if (!IsValidSimpleInt32List(item, onError)) errorCount++;
            }
            foreach (global::NClassify.Example.SimpleUri item in __fld_simpleUri)
            {
                if (!IsValidSimpleUriList(item, onError)) errorCount++;
            }
            foreach (global::NClassify.Example.SimpleText item in __fld_simpleText)
            {
                if (!IsValidSimpleTextList(item, onError)) errorCount++;
            }
            foreach (global::NClassify.Example.SimpleBytes item in __fld_simpleBytes)
            {
                if (!IsValidSimpleBytesList(item, onError)) errorCount++;
            }
            foreach (global::NClassify.Example.SampleMsg item in __fld_sampleMsg)
            {
                if (!IsValidSampleMsgList(item, onError)) errorCount++;
            }
            foreach (global::NClassify.Example.ISampleMsg item in __fld_iSampleMsg)
            {
                if (!IsValidISampleMsgList(item, onError)) errorCount++;
            }
            return errorCount;
        }
        public IArrayFields AsReadOnly()
        {
            if (_readOnly) return this;
            ArrayFields copy = Clone();
            copy.MakeReadOnly();
            return copy;
        }
        public bool IsReadOnly()
        {
            return _readOnly;
        }
        public virtual void MakeReadOnly()
        {
            if (_readOnly) return;
            _readOnly = true;
            __fld_bool.MakeReadOnly();
            __fld_bytes.MakeReadOnly();
            __fld_int8.MakeReadOnly();
            __fld_uint8.MakeReadOnly();
            __fld_int16.MakeReadOnly();
            __fld_uint16.MakeReadOnly();
            __fld_int32.MakeReadOnly();
            __fld_uint32.MakeReadOnly();
            __fld_int64.MakeReadOnly();
            __fld_uint64.MakeReadOnly();
            __fld_float.MakeReadOnly();
            __fld_double.MakeReadOnly();
            __fld_guid.MakeReadOnly();
            __fld_dateTime.MakeReadOnly();
            __fld_timeSpan.MakeReadOnly();
            __fld_string.MakeReadOnly();
            __fld_enum.MakeReadOnly();
            __fld_simpleInt32.MakeReadOnly();
            __fld_simpleUri.MakeReadOnly();
            __fld_simpleText.MakeReadOnly();
            __fld_simpleBytes.MakeReadOnly();
            __fld_sampleMsg.MakeReadOnly();
            __fld_iSampleMsg.MakeReadOnly();
            if (object.ReferenceEquals(this, _defaultInstance)) return;
        }
        public virtual void AcceptDefaults()
        {
        }
        public virtual void Clear()
        {
            Initialize();
        }
        private void Initialize()
        {
            __fld_bool = new _BoolList();
            __fld_bytes = new _BytesList();
            __fld_int8 = new _Int8List();
            __fld_uint8 = new _Uint8List();
            __fld_int16 = new _Int16List();
            __fld_uint16 = new _Uint16List();
            __fld_int32 = new _Int32List();
            __fld_uint32 = new _Uint32List();
            __fld_int64 = new _Int64List();
            __fld_uint64 = new _Uint64List();
            __fld_float = new _FloatList();
            __fld_double = new _DoubleList();
            __fld_guid = new _GuidList();
            __fld_dateTime = new _DateTimeList();
            __fld_timeSpan = new _TimeSpanList();
            __fld_string = new _StringList();
            __fld_enum = new _EnumList();
            __fld_simpleInt32 = new _SimpleInt32List();
            __fld_simpleUri = new _SimpleUriList();
            __fld_simpleText = new _SimpleTextList();
            __fld_simpleBytes = new _SimpleBytesList();
            __fld_sampleMsg = new _SampleMsgList();
            __fld_iSampleMsg = new _ISampleMsgList();
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        protected new virtual object MemberwiseClone()
        {
            ArrayFields value = (ArrayFields)base.MemberwiseClone();
            value.__fld_bool = value.__fld_bool.Clone();
            value.__fld_bytes = value.__fld_bytes.Clone();
            value.__fld_int8 = value.__fld_int8.Clone();
            value.__fld_uint8 = value.__fld_uint8.Clone();
            value.__fld_int16 = value.__fld_int16.Clone();
            value.__fld_uint16 = value.__fld_uint16.Clone();
            value.__fld_int32 = value.__fld_int32.Clone();
            value.__fld_uint32 = value.__fld_uint32.Clone();
            value.__fld_int64 = value.__fld_int64.Clone();
            value.__fld_uint64 = value.__fld_uint64.Clone();
            value.__fld_float = value.__fld_float.Clone();
            value.__fld_double = value.__fld_double.Clone();
            value.__fld_guid = value.__fld_guid.Clone();
            value.__fld_dateTime = value.__fld_dateTime.Clone();
            value.__fld_timeSpan = value.__fld_timeSpan.Clone();
            value.__fld_string = value.__fld_string.Clone();
            value.__fld_enum = value.__fld_enum.Clone();
            value.__fld_simpleInt32 = value.__fld_simpleInt32.Clone();
            value.__fld_simpleUri = value.__fld_simpleUri.Clone();
            value.__fld_simpleText = value.__fld_simpleText.Clone();
            value.__fld_simpleBytes = value.__fld_simpleBytes.Clone();
            value.__fld_sampleMsg = value.__fld_sampleMsg.Clone();
            value.__fld_iSampleMsg = value.__fld_iSampleMsg.Clone();
            return value;
        }
        public ArrayFields Clone()
        {
            return (ArrayFields)this.MemberwiseClone();
        }
        public virtual void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is IArrayFields) MergeFrom((IArrayFields)other);
            else throw new global::System.ArgumentException();
        }
        public void MergeFrom(IArrayFields other)
        {
            __fld_bool.AddRange(other.BoolList);
            __fld_bytes.AddRange(other.BytesList);
            __fld_int8.AddRange(other.Int8List);
            __fld_uint8.AddRange(other.Uint8List);
            __fld_int16.AddRange(other.Int16List);
            __fld_uint16.AddRange(other.Uint16List);
            __fld_int32.AddRange(other.Int32List);
            __fld_uint32.AddRange(other.Uint32List);
            __fld_int64.AddRange(other.Int64List);
            __fld_uint64.AddRange(other.Uint64List);
            __fld_float.AddRange(other.FloatList);
            __fld_double.AddRange(other.DoubleList);
            __fld_guid.AddRange(other.GuidList);
            __fld_dateTime.AddRange(other.DateTimeList);
            __fld_timeSpan.AddRange(other.TimeSpanList);
            __fld_string.AddRange(other.StringList);
            __fld_enum.AddRange(other.EnumList);
            __fld_simpleInt32.AddRange(other.SimpleInt32List);
            __fld_simpleUri.AddRange(other.SimpleUriList);
            __fld_simpleText.AddRange(other.SimpleTextList);
            __fld_simpleBytes.AddRange(other.SimpleBytesList);
            foreach (global::NClassify.Example.SampleMsg item in other.SampleMsgList)
                __fld_sampleMsg.Add((global::NClassify.Example.SampleMsg)item.Clone());
            foreach (global::NClassify.Example.ISampleMsg item in other.ISampleMsgList)
                __fld_iSampleMsg.Add((global::NClassify.Example.ISampleMsg)item.Clone());
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        private static readonly string[] _fieldNamesToIx = new string[] { "bool", "bytes", "dateTime", "double", "enum", "float", "guid", "i_sample_msg", "int16", "int32", "int64", "int8", "sample_msg", "simple_bytes", "simple_int32", "simple_text", "simple_uri", "string", "timeSpan", "uint16", "uint32", "uint64", "uint8" };
        private static readonly bool[] _isMessageFldIx = new bool[] { false, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false };
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ArrayFields", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                if (reader.NodeType != global::System.Xml.XmlNodeType.Element && reader.NodeType != global::System.Xml.XmlNodeType.Attribute)
                {
                    reader.Read();
                    continue;
                }
                else MergeField(reader);
            }
        }
        protected virtual void MergeField(global::System.Xml.XmlReader reader)
        {
            int field = global::System.Array.BinarySearch(_fieldNamesToIx, reader.LocalName, global::System.StringComparer.Ordinal);
            bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
            bool isAttribute = isElement ? false : reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
            if (!isElement && !isAttribute) throw new global::System.FormatException();
            if (field < 0)
            {
                if (isElement)
                    reader.ReadInnerXml();
                else if (!reader.MoveToNextAttribute())
                    reader.MoveToElement();
            }
            else if (_isMessageFldIx[field])
            {
                if (!isElement)
                    throw new global::System.FormatException();
                switch(field)
                {
                    case 7:
                    {
                        global::NClassify.Example.SampleMsg child = new global::NClassify.Example.SampleMsg();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_iSampleMsg.Add(child);
                        break;
                    }
                    case 12:
                    {
                        global::NClassify.Example.SampleMsg child = new global::NClassify.Example.SampleMsg();
                        ((global::NClassify.Library.IBuilder)child).ReadXml(reader.LocalName, reader);
                        __fld_sampleMsg.Add(child);
                        break;
                    }
                }
            }
            else
            {
                global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
                if (isAttribute)
                {
                    sbuilder.Append(reader.Value);
                    if (!reader.MoveToNextAttribute())
                        reader.MoveToElement();
                }
                else if (reader.IsEmptyElement)
                    reader.ReadStartElement();
                else
                {
                    int stop = reader.Depth;
                    while (reader.Read() && reader.Depth > stop)
                    {
                        while (reader.IsStartElement()) reader.Skip();
                        if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                            sbuilder.Append(reader.Value);
                    }
                    reader.ReadEndElement();
                }
                switch(field)
                {
                    case 0:
                    {
                        __fld_bool.Add(global::NClassify.Library.TypeConverter.Instance.ParseBoolean(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                        break;
                    }
                    case 1:
                    {
                        __fld_bytes.Add(global::NClassify.Library.TypeConverter.Instance.ParseBytes(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                        break;
                    }
                    case 2:
                    {
                        __fld_dateTime.Add(global::NClassify.Library.TypeConverter.Instance.ParseDateTime(sbuilder.ToString(), "yyyy-MM-dd hh:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
                        break;
                    }
                    case 3:
                    {
                        __fld_double.Add(global::NClassify.Library.TypeConverter.Instance.ParseDouble(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                        break;
                    }
                    case 4:
                    {
                        __fld_enum.Add((global::NClassify.Example.SampleEnum)global::System.Enum.Parse(typeof(global::NClassify.Example.SampleEnum), sbuilder.ToString(), false));
                        break;
                    }
                    case 5:
                    {
                        __fld_float.Add(global::NClassify.Library.TypeConverter.Instance.ParseFloat(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                        break;
                    }
                    case 6:
                    {
                        __fld_guid.Add(global::NClassify.Library.TypeConverter.Instance.ParseGuid(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                        break;
                    }
                    case 8:
                    {
                        __fld_int16.Add(global::NClassify.Library.TypeConverter.Instance.ParseInt16(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                        break;
                    }
                    case 9:
                    {
                        __fld_int32.Add(global::NClassify.Library.TypeConverter.Instance.ParseInt32(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                        break;
                    }
                    case 10:
                    {
                        __fld_int64.Add(global::NClassify.Library.TypeConverter.Instance.ParseInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                        break;
                    }
                    case 11:
                    {
                        __fld_int8.Add(global::NClassify.Library.TypeConverter.Instance.ParseInt8(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                        break;
                    }
                    case 13:
                    {
                        __fld_simpleBytes.Add(new global::NClassify.Example.SimpleBytes(global::NClassify.Library.TypeConverter.Instance.ParseBytes(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture)));
                        break;
                    }
                    case 14:
                    {
                        __fld_simpleInt32.Add(new global::NClassify.Example.SimpleInt32(global::NClassify.Library.TypeConverter.Instance.ParseInt32(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture)));
                        break;
                    }
                    case 15:
                    {
                        __fld_simpleText.Add(new global::NClassify.Example.SimpleText(sbuilder.ToString()));
                        break;
                    }
                    case 16:
                    {
                        __fld_simpleUri.Add(new global::NClassify.Example.SimpleUri(sbuilder.ToString()));
                        break;
                    }
                    case 17:
                    {
                        __fld_string.Add(sbuilder.ToString());
                        break;
                    }
                    case 18:
                    {
                        __fld_timeSpan.Add(global::NClassify.Library.TypeConverter.Instance.ParseTimeSpan(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                        break;
                    }
                    case 19:
                    {
                        __fld_uint16.Add(global::NClassify.Library.TypeConverter.Instance.ParseUInt16(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                        break;
                    }
                    case 20:
                    {
                        __fld_uint32.Add(global::NClassify.Library.TypeConverter.Instance.ParseUInt32(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                        break;
                    }
                    case 21:
                    {
                        __fld_uint64.Add(global::NClassify.Library.TypeConverter.Instance.ParseUInt64(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                        break;
                    }
                    case 22:
                    {
                        __fld_uint8.Add(global::NClassify.Library.TypeConverter.Instance.ParseUInt8(sbuilder.ToString(), null, global::System.Globalization.CultureInfo.InvariantCulture));
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ArrayFields", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            MergeTo(writer);
            writer.WriteFullEndElement();
        }
        public virtual void MergeTo(global::System.Xml.XmlWriter writer)
        {
            foreach (bool item in __fld_bool)
            {
                writer.WriteElementString("bool", global::NClassify.Library.TypeConverter.Instance.ToString(item, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            foreach (global::NClassify.Library.ByteArray item in __fld_bytes)
            {
                writer.WriteElementString("bytes", global::NClassify.Library.TypeConverter.Instance.ToString(item, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            foreach (sbyte item in __fld_int8)
            {
                writer.WriteElementString("int8", global::NClassify.Library.TypeConverter.Instance.ToString(item, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            foreach (byte item in __fld_uint8)
            {
                writer.WriteElementString("uint8", global::NClassify.Library.TypeConverter.Instance.ToString(item, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            foreach (short item in __fld_int16)
            {
                writer.WriteElementString("int16", global::NClassify.Library.TypeConverter.Instance.ToString(item, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            foreach (ushort item in __fld_uint16)
            {
                writer.WriteElementString("uint16", global::NClassify.Library.TypeConverter.Instance.ToString(item, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            foreach (int item in __fld_int32)
            {
                writer.WriteElementString("int32", global::NClassify.Library.TypeConverter.Instance.ToString(item, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            foreach (uint item in __fld_uint32)
            {
                writer.WriteElementString("uint32", global::NClassify.Library.TypeConverter.Instance.ToString(item, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            foreach (long item in __fld_int64)
            {
                writer.WriteElementString("int64", global::NClassify.Library.TypeConverter.Instance.ToString(item, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            foreach (ulong item in __fld_uint64)
            {
                writer.WriteElementString("uint64", global::NClassify.Library.TypeConverter.Instance.ToString(item, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            foreach (float item in __fld_float)
            {
                writer.WriteElementString("float", global::NClassify.Library.TypeConverter.Instance.ToString(item, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            foreach (double item in __fld_double)
            {
                writer.WriteElementString("double", global::NClassify.Library.TypeConverter.Instance.ToString(item, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            foreach (global::System.Guid item in __fld_guid)
            {
                writer.WriteElementString("guid", global::NClassify.Library.TypeConverter.Instance.ToString(item, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            foreach (global::System.DateTime item in __fld_dateTime)
            {
                writer.WriteElementString("dateTime", global::NClassify.Library.TypeConverter.Instance.ToString(item, "yyyy-MM-dd hh:mm:ss", global::System.Globalization.CultureInfo.InvariantCulture));
            }
            foreach (global::System.TimeSpan item in __fld_timeSpan)
            {
                writer.WriteElementString("timeSpan", global::NClassify.Library.TypeConverter.Instance.ToString(item, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            foreach (string item in __fld_string)
            {
                writer.WriteElementString("string", item);
            }
            foreach (global::NClassify.Example.SampleEnum item in __fld_enum)
            {
                writer.WriteElementString("enum", item.ToString());
            }
            foreach (global::NClassify.Example.SimpleInt32 item in __fld_simpleInt32)
            {
                writer.WriteElementString("simple_int32", global::NClassify.Library.TypeConverter.Instance.ToString(item.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            foreach (global::NClassify.Example.SimpleUri item in __fld_simpleUri)
            {
                writer.WriteElementString("simple_uri", item.Value);
            }
            foreach (global::NClassify.Example.SimpleText item in __fld_simpleText)
            {
                writer.WriteElementString("simple_text", item.Value);
            }
            foreach (global::NClassify.Example.SimpleBytes item in __fld_simpleBytes)
            {
                writer.WriteElementString("simple_bytes", global::NClassify.Library.TypeConverter.Instance.ToString(item.Value, null, global::System.Globalization.CultureInfo.InvariantCulture));
            }
            foreach (global::NClassify.Example.SampleMsg item in __fld_sampleMsg)
            {
                item.WriteXml("sample_msg", writer);
            }
            foreach (global::NClassify.Example.ISampleMsg item in __fld_iSampleMsg)
            {
                item.WriteXml("i_sample_msg", writer);
            }
        }
        #endregion
    }
    #endregion
    #region ExampleService
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial interface IExampleService
    {
        void Ping();
        global::NClassify.Example.ISampleMsg Get();
        global::NClassify.Example.SampleMsg Put(global::NClassify.Example.SampleMsg sampleMsg);
        void Delete(global::NClassify.Example.ISampleMsg sampleMsg);
    }
    [global::System.Xml.Serialization.XmlType("ExampleService")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
    public partial class ExampleService : IExampleService, global::NClassify.Library.IDispatchStub
    {
        private bool _dispose;
        private readonly global::NClassify.Library.IDispatchStub _dispatch;
        public ExampleService(global::NClassify.Library.IDispatchStub dispatch)
            : this(dispatch, true) { }
        public ExampleService(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
        {
            if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
            _dispatch = dispatch;
            _dispose = dispose;
        }
        public void Dispose()
        {
            if (_dispose)
            {
                _dispose = false;
                _dispatch.Dispose();
            }
        }
        protected virtual void Invoke<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
        {
            _dispatch.CallMethod(methodName, request, response);
        }
        void global::NClassify.Library.IDispatchStub.CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) 
        {
            Invoke(methodName, request, response);
        }
        public void Ping()
        {
            Invoke("Ping", global::NClassify.Library.EmptyMessage.DefaultInstance, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        public global::NClassify.Example.ISampleMsg Get()
        {
            global::NClassify.Example.SampleMsg response = new global::NClassify.Example.SampleMsg();
            Invoke("Get", global::NClassify.Library.EmptyMessage.DefaultInstance, response);
            return response;
        }
        public global::NClassify.Example.SampleMsg Put(global::NClassify.Example.SampleMsg sampleMsg)
        {
            global::NClassify.Example.SampleMsg response = new global::NClassify.Example.SampleMsg();
            Invoke("Put", sampleMsg, response);
            return response;
        }
        public void Delete(global::NClassify.Example.ISampleMsg sampleMsg)
        {
            Invoke("Delete", sampleMsg, global::NClassify.Library.EmptyMessage.DefaultInstance);
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class Dispatch : global::NClassify.Library.IDispatchStub
        {
            private bool _dispose;
            private readonly IExampleService _dispatch;
            public Dispatch(IExampleService dispatch)
                : this(dispatch, true) { }
            public Dispatch(IExampleService dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose && dispatch is global::System.IDisposable;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    ((global::System.IDisposable)_dispatch).Dispose();
                }
            }
            public void CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IBuilder
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "Delete", "Get", "Ping", "Put" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        _dispatch.Delete((global::NClassify.Example.ISampleMsg)(object)request);
                        break;
                    }
                    case 1:
                    {
                        response.MergeFrom(_dispatch.Get());
                        break;
                    }
                    case 2:
                    {
                        _dispatch.Ping();
                        break;
                    }
                    case 3:
                    {
                        response.MergeFrom(_dispatch.Put((global::NClassify.Example.SampleMsg)(object)request));
                        break;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IExampleService).FullName, methodName);
                    }
                }
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "0.1")]
        public partial class ServerStub : global::NClassify.Library.IServerStub
        {
            private bool _dispose;
            private readonly global::NClassify.Library.IDispatchStub _dispatch;
            public ServerStub(IExampleService dispatch)
                : this(new Dispatch(dispatch), true) { }
            public ServerStub(IExampleService dispatch, bool dispose)
                : this(new Dispatch(dispatch), dispose) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch)
                : this(dispatch, true) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    _dispatch.Dispose();
                }
            }
            public global::NClassify.Library.IMessage CallMethod(string methodName, global::System.Action<global::NClassify.Library.IBuilder> readInput)
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "Delete", "Get", "Ping", "Put" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        global::NClassify.Example.SampleMsg request = new global::NClassify.Example.SampleMsg();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 1:
                    {
                        global::NClassify.Example.SampleMsg response = new global::NClassify.Example.SampleMsg();
                        _dispatch.CallMethod(methodName, global::NClassify.Library.EmptyMessage.DefaultInstance, response);
                        return response;
                    }
                    case 2:
                    {
                        _dispatch.CallMethod(methodName, global::NClassify.Library.EmptyMessage.DefaultInstance, global::NClassify.Library.EmptyMessage.DefaultInstance);
                        return global::NClassify.Library.EmptyMessage.DefaultInstance;
                    }
                    case 3:
                    {
                        global::NClassify.Example.SampleMsg request = new global::NClassify.Example.SampleMsg();
                        readInput(request);
                        global::NClassify.Example.SampleMsg response = new global::NClassify.Example.SampleMsg();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IExampleService).FullName, methodName);
                    }
                }
            }
        }
    }
    #endregion
}
#endregion

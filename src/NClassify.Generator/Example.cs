// Generated by NClassify.Generator, Version=1.0
#pragma warning disable 1591, 0612, 3021
#region Designer generated code
namespace NClassify.Example
{
    #region SampleEnum
    [global::System.Xml.Serialization.XmlType("SampleEnum")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
    public enum SampleEnum
    {
        /// <summary>
        /// one = 1
        /// </summary>
        [global::System.Xml.Serialization.XmlEnum("one")] One = 1,
        /// <summary>
        /// two = 2
        /// </summary>
        [global::System.Xml.Serialization.XmlEnum("two")] Two = 2,
        /// <summary>
        /// three = 3
        /// </summary>
        [global::System.Xml.Serialization.XmlEnum("three")] Three = 3,
    }
    #endregion
    #region SimpleInt32
    [global::System.Xml.Serialization.XmlType("SimpleInt32")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
    public partial struct SimpleInt32 : global::System.IEquatable<SimpleInt32>, global::System.IComparable<SimpleInt32>, global::NClassify.Library.IValidate
    {
        #region Instance Fields and Members
        public static bool IsValidValue(int value)
        {
            if (value.CompareTo(1) < 0) return false;
            return true;
        }
        private bool __has_value;
        private int __fld_value;
        public SimpleInt32(int value) : this()
        {
            this.Value = value;
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasValue
        {
            get { return __has_value; }
        }
        [global::System.Xml.Serialization.XmlText()]
        public int Value
        {
            get
            {
                if (!__has_value) return 0;
                return __fld_value;
            }
            private set
            {
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid()
        {
            if (!__has_value || !IsValidValue(__fld_value)) return false;
             return true;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is SimpleInt32 ? Equals((SimpleInt32)obj) : base.Equals(obj);
        }
        public bool Equals(SimpleInt32 other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(SimpleInt32 other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator SimpleInt32(int value)
        {
            return new SimpleInt32(value);
        }
        public static explicit operator int(SimpleInt32 value)
        {
            return value.Value;
        }
        public static bool operator ==(SimpleInt32 x, SimpleInt32 y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(SimpleInt32 x, SimpleInt32 y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region SimpleBytes
    [global::System.Xml.Serialization.XmlType("SimpleBytes")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
    public partial struct SimpleBytes : global::System.IEquatable<SimpleBytes>, global::System.IComparable<SimpleBytes>, global::NClassify.Library.IValidate
    {
        #region Instance Fields and Members
        public static bool IsValidValue(global::NClassify.Library.ByteArray value)
        {
            if (value.Length < 1) return false;
            if (value.Length > 255) return false;
            return true;
        }
        private bool __has_value;
        private global::NClassify.Library.ByteArray __fld_value;
        public SimpleBytes(global::NClassify.Library.ByteArray value) : this()
        {
            this.Value = value;
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasValue
        {
            get { return __has_value; }
        }
        [global::System.Xml.Serialization.XmlText()]
        public global::NClassify.Library.ByteArray Value
        {
            get
            {
                if (!__has_value) return new byte[0];
                return __fld_value;
            }
            private set
            {
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid()
        {
            if (!__has_value || !IsValidValue(__fld_value)) return false;
             return true;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is SimpleBytes ? Equals((SimpleBytes)obj) : base.Equals(obj);
        }
        public bool Equals(SimpleBytes other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(SimpleBytes other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator SimpleBytes(global::NClassify.Library.ByteArray value)
        {
            return new SimpleBytes(value);
        }
        public static explicit operator global::NClassify.Library.ByteArray(SimpleBytes value)
        {
            return value.Value;
        }
        public static bool operator ==(SimpleBytes x, SimpleBytes y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(SimpleBytes x, SimpleBytes y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region SimpleText
    [global::System.Xml.Serialization.XmlType("SimpleText")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
    public partial struct SimpleText : global::System.IEquatable<SimpleText>, global::System.IComparable<SimpleText>, global::NClassify.Library.IValidate
    {
        #region Instance Fields and Members
        private static readonly string[] __in_value = new string[] {"abc", "def", "ghi", "jkl", "mno", "pqr", "stu", "vwx", "yz"};
        public static bool IsValidValue(string value)
        {
            if (null == value) return false;
            if (global::System.Array.BinarySearch(__in_value, value) >= 0) return false;
            return true;
        }
        private bool __has_value;
        private string __fld_value;
        public SimpleText(string value) : this()
        {
            this.Value = value;
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasValue
        {
            get { return __has_value; }
        }
        [global::System.Xml.Serialization.XmlText()]
        public string Value
        {
            get
            {
                if (!__has_value) return "";
                return __fld_value;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Value");
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid()
        {
            if (!__has_value || !IsValidValue(__fld_value)) return false;
             return true;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is SimpleText ? Equals((SimpleText)obj) : base.Equals(obj);
        }
        public bool Equals(SimpleText other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(SimpleText other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator SimpleText(string value)
        {
            return new SimpleText(value);
        }
        public static explicit operator string(SimpleText value)
        {
            return value.Value;
        }
        public static bool operator ==(SimpleText x, SimpleText y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(SimpleText x, SimpleText y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region simple_uri
    [global::System.Xml.Serialization.XmlType("simple_uri")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
    public partial struct SimpleUri : global::System.IEquatable<SimpleUri>, global::System.IComparable<SimpleUri>, global::NClassify.Library.IValidate
    {
        #region Instance Fields and Members
        private static readonly global::System.Text.RegularExpressions.Regex __valid_value = new global::System.Text.RegularExpressions.Regex("^https?\\://.+", global::System.Text.RegularExpressions.RegexOptions.Singleline | global::System.Text.RegularExpressions.RegexOptions.IgnoreCase);
        private static bool IsValidUri(string value)
        {
            global::System.Uri tmp;
            return global::System.Uri.TryCreate(value, global::System.UriKind.Absolute, out tmp);
        }
        public static bool IsValidValue(string value)
        {
            if (null == value) return false;
            if (value.Length < 8) return false;
            if (value.Length > 2048) return false;
            if (!__valid_value.IsMatch(value.ToString())) return false;
            if (!(IsValidUri(value))) return false;
            return true;
        }
        private bool __has_value;
        private string __fld_value;
        public SimpleUri(string value) : this()
        {
            this.Value = value;
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasValue
        {
            get { return __has_value; }
        }
        [global::System.Xml.Serialization.XmlText()]
        public string Value
        {
            get
            {
                if (!__has_value) return "";
                return __fld_value;
            }
            private set
            {
                if (null == value) throw new global::System.ArgumentNullException("Value");
                __fld_value = value;
                __has_value = true;
            }
        }
        public bool IsValid()
        {
            if (!__has_value || !IsValidValue(__fld_value)) return false;
             return true;
        }
        #endregion
        #region Operators and Comparisons
        public override string ToString()
        {
            return Value.ToString();
        }
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            return obj is SimpleUri ? Equals((SimpleUri)obj) : base.Equals(obj);
        }
        public bool Equals(SimpleUri other)
        {
            return __has_value && other.__has_value ? __fld_value.Equals(other.__fld_value) : __has_value == other.__has_value;
        }
        public int CompareTo(SimpleUri other)
        {
            return __has_value && other.__has_value ? __fld_value.CompareTo(other.__fld_value) : __has_value ? 1 : other.__has_value ? -1 : 0;
        }
        public static explicit operator SimpleUri(string value)
        {
            return new SimpleUri(value);
        }
        public static explicit operator string(SimpleUri value)
        {
            return value.Value;
        }
        public static bool operator ==(SimpleUri x, SimpleUri y)
        {
            return x.Equals(y);
        }
        public static bool operator !=(SimpleUri x, SimpleUri y)
        {
            return !x.Equals(y);
        }
        #endregion
    }
    #endregion
    #region SampleMsg
    [global::System.Xml.Serialization.XmlType("SampleMsg")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
    public partial class SampleMsg : global::System.ICloneable, global::System.Xml.Serialization.IXmlSerializable, global::NClassify.Library.IMessage
    {
        #region _readErrorsList
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _readErrorsList : global::System.Collections.Generic.IList<string>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("readErrorsList");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<string> _contents;
            public _readErrorsList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<string>();
            }
            public _readErrorsList(global::System.Collections.Generic.IList<string> contents, bool readOnly)
            {
                _readOnly = readOnly;
                foreach (string item in AssertNotNull(contents)) AssertNotNull(item);
                _contents = new global::System.Collections.Generic.List<string>(AssertNotNull(contents));
            }
            public _readErrorsList AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _readErrorsList(_contents, true);
            }
            private global::System.Collections.Generic.List<string> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public string this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(string value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<string> value)
            {
                foreach (string item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, string value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(string item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(string item) { return _contents.Contains(item); }
            public int IndexOf(string item) { return _contents.IndexOf(item); }
            public void CopyTo(string[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _readErrorsList Clone()
            {
                return new _readErrorsList(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<string> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _ChildrenList
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _ChildrenList : global::System.Collections.Generic.IList<global::NClassify.Example.SampleMsg>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("ChildrenList");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::NClassify.Example.SampleMsg> _contents;
            public _ChildrenList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SampleMsg>();
            }
            public _ChildrenList(global::System.Collections.Generic.IList<global::NClassify.Example.SampleMsg> contents, bool readOnly)
            {
                _readOnly = readOnly;
                foreach (global::NClassify.Example.SampleMsg item in AssertNotNull(contents)) AssertNotNull(item);
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SampleMsg>(AssertNotNull(contents));
            }
            public _ChildrenList AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _ChildrenList(_contents, true);
            }
            private global::System.Collections.Generic.List<global::NClassify.Example.SampleMsg> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::NClassify.Example.SampleMsg this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::NClassify.Example.SampleMsg value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::NClassify.Example.SampleMsg> value)
            {
                foreach (global::NClassify.Example.SampleMsg item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::NClassify.Example.SampleMsg value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::NClassify.Example.SampleMsg item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::NClassify.Example.SampleMsg item) { return _contents.Contains(item); }
            public int IndexOf(global::NClassify.Example.SampleMsg item) { return _contents.IndexOf(item); }
            public void CopyTo(global::NClassify.Example.SampleMsg[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _ChildrenList Clone()
            {
                return new _ChildrenList(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<global::NClassify.Example.SampleMsg> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidId(global::NClassify.Example.SimpleInt32 value)
        {
            if (!value.IsValid()) return false;
            return true;
        }
        public static bool IsValidUri(global::NClassify.Example.SimpleUri value)
        {
            if (!value.IsValid()) return false;
            return true;
        }
        public static bool IsValidAlphaGroup(global::NClassify.Example.SimpleText value)
        {
            if (!value.IsValid()) return false;
            return true;
        }
        public static bool IsValidBytes(global::NClassify.Example.SimpleBytes value)
        {
            if (!value.IsValid()) return false;
            return true;
        }
        public static bool IsValidreadErrors(string value)
        {
            if (null == value) return false;
            if (value.Length > 0) return false;
            return true;
        }
        public static bool IsValidChildren(global::NClassify.Example.SampleMsg value)
        {
            if (null == value) return false;
            if (!value.IsValid()) return false;
            return true;
        }
        #endregion
        #region Instance Fields
        private bool __has_id;
        private global::NClassify.Example.SimpleInt32 __fld_id = new global::NClassify.Example.SimpleInt32(0);
        private bool __has_uri;
        private global::NClassify.Example.SimpleUri __fld_uri = new global::NClassify.Example.SimpleUri("");
        private bool __has_alphaGroup;
        private global::NClassify.Example.SimpleText __fld_alphaGroup = new global::NClassify.Example.SimpleText("abc");
        private bool __has_enum;
        private global::NClassify.Example.SampleEnum __fld_enum = global::NClassify.Example.SampleEnum.One;
        private bool __has_bytes;
        private global::NClassify.Example.SimpleBytes __fld_bytes;
        private bool __has_verified;
        private bool __fld_verified;
        private _readErrorsList __fld_errors = new _readErrorsList();
        private _ChildrenList __fld_children = new _ChildrenList();
        #endregion
        #region Instance Members
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasId
        {
            get { return __has_id; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_id = new global::NClassify.Example.SimpleInt32(0);
                __has_id = false;
            }
        }
        [global::System.Xml.Serialization.XmlElement("Id")]
        public global::NClassify.Example.SimpleInt32 Id
        {
            get
            {
                return __fld_id;
            }
            set
            {
                __fld_id = value;
                __has_id = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasUri
        {
            get { return __has_uri; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_uri = new global::NClassify.Example.SimpleUri("");
                __has_uri = false;
            }
        }
        [global::System.Xml.Serialization.XmlElement("uri")]
        public global::NClassify.Example.SimpleUri Uri
        {
            get
            {
                return __fld_uri;
            }
            set
            {
                __fld_uri = value;
                __has_uri = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasAlphaGroup
        {
            get { return __has_alphaGroup; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_alphaGroup = new global::NClassify.Example.SimpleText("abc");
                __has_alphaGroup = false;
            }
        }
        [global::System.Xml.Serialization.XmlElement("alpha_group")]
        public global::NClassify.Example.SimpleText AlphaGroup
        {
            get
            {
                return __fld_alphaGroup;
            }
            set
            {
                __fld_alphaGroup = value;
                __has_alphaGroup = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasEnum
        {
            get { return __has_enum; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_enum = global::NClassify.Example.SampleEnum.One;
                __has_enum = false;
            }
        }
        [global::System.Xml.Serialization.XmlElement("enum")]
        public global::NClassify.Example.SampleEnum Enum
        {
            get
            {
                return __fld_enum;
            }
            set
            {
                __fld_enum = value;
                __has_enum = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasBytes
        {
            get { return __has_bytes; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_bytes = new global::NClassify.Example.SimpleBytes(new byte[0]);
                __has_bytes = false;
            }
        }
        [global::System.Xml.Serialization.XmlElement("bytes")]
        public global::NClassify.Example.SimpleBytes Bytes
        {
            get
            {
                return __fld_bytes;
            }
            set
            {
                __fld_bytes = value;
                __has_bytes = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasVerified
        {
            get { return __has_verified; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_verified = false;
                __has_verified = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(false)]
        [global::System.Xml.Serialization.XmlElement("verified")]
        public bool Verified
        {
            get
            {
                return __fld_verified;
            }
            set
            {
                __fld_verified = value;
                __has_verified = true;
            }
        }
        protected global::System.Collections.Generic.IList<string> readErrorsList
        {
            get
            {
                return new global::System.Collections.ObjectModel.ReadOnlyCollection<string>(__fld_errors);
            }
            private set
            {
                __fld_errors = new _readErrorsList(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("children")]
        public global::System.Collections.Generic.IList<global::NClassify.Example.SampleMsg> ChildrenList
        {
            get
            {
                return __fld_children;
            }
            set
            {
                __fld_children = new _ChildrenList(value, false);
            }
        }
        public bool IsValid()
        {
            if (__has_id && !IsValidId(__fld_id)) return false;
            if (__has_uri && !IsValidUri(__fld_uri)) return false;
            if (!__has_alphaGroup || !IsValidAlphaGroup(__fld_alphaGroup)) return false;
            if (__has_bytes && !IsValidBytes(__fld_bytes)) return false;
            foreach (string item in __fld_errors)
            {
                if (!IsValidreadErrors(item)) return false;
            }
            foreach (global::NClassify.Example.SampleMsg item in __fld_children)
            {
                if (!IsValidChildren(item)) return false;
            }
             return true;
        }
        public void Initialize()
        {
            __has_id = true;
            __has_uri = true;
            __has_alphaGroup = true;
            __has_enum = true;
            __has_bytes = true;
            __has_verified = true;
        }
        public void Clear()
        {
            __has_id = false;
            __fld_id = new global::NClassify.Example.SimpleInt32(0);
            __has_uri = false;
            __fld_uri = new global::NClassify.Example.SimpleUri("");
            __has_alphaGroup = false;
            __fld_alphaGroup = new global::NClassify.Example.SimpleText("");
            __has_enum = false;
            __fld_enum = default(global::NClassify.Example.SampleEnum);
            __has_bytes = false;
            __fld_bytes = new global::NClassify.Example.SimpleBytes(new byte[0]);
            __has_verified = false;
            __fld_verified = false;
            __fld_errors = new _readErrorsList();
            __fld_children = new _ChildrenList();
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        public SampleMsg Clone()
        {
            SampleMsg value = (SampleMsg)this.MemberwiseClone();
            value.__fld_errors = value.__fld_errors.Clone();
            value.__fld_children = value.__fld_children.Clone();
            return value;
        }
        public void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is SampleMsg) MergeFrom((SampleMsg)other);
        }
        public void MergeFrom(SampleMsg other)
        {
            if (other.__has_id) __fld_id = other.__fld_id;
            if (other.__has_uri) __fld_uri = other.__fld_uri;
            if (other.__has_alphaGroup) __fld_alphaGroup = other.__fld_alphaGroup;
            if (other.__has_enum) __fld_enum = other.__fld_enum;
            if (other.__has_bytes) __fld_bytes = other.__fld_bytes;
            if (other.__has_verified) __fld_verified = other.__fld_verified;
            __fld_errors.AddRange(other.__fld_errors);
            __fld_children.AddRange(other.__fld_children);
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("SampleMsg", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
            string[] fields = new string[] { "Id", "alpha_group", "bytes", "children", "enum", "errors", "uri", "verified" };
            bool[] isMessage = new bool[] { false, false, false, true, false, false, false, false };
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
                bool isAttribute = reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
                if (!isElement && !isAttribute)
                {
                    reader.Read();
                    continue;
                }
                int field = global::System.Array.BinarySearch(fields, reader.LocalName, global::System.StringComparer.Ordinal);
                if (isElement && field >= 0 && isMessage[field])
                {
                    switch(field)
                    {
                        case 3:
                        {
                            global::NClassify.Example.SampleMsg child = new global::NClassify.Example.SampleMsg();
                            child.ReadXml(reader.LocalName, reader);
                            __fld_children.Add(child);
                            break;
                        }
                    }
                }
                else
                {
                    sbuilder.Length = 0;
                    if (isAttribute)
                    {
                        sbuilder.Append(reader.Value);
                        if (!reader.MoveToNextAttribute())
                            reader.MoveToElement();
                    }
                    else if (reader.IsEmptyElement)
                        reader.ReadStartElement();
                    else
                    {
                        int stop = reader.Depth;
                        while (reader.Read() && reader.Depth > stop)
                        {
                            while (reader.IsStartElement()) reader.Skip();
                            if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                                sbuilder.Append(reader.Value);
                        }
                        reader.ReadEndElement();
                    }
                    switch(field)
                    {
                        case 0:
                        {
                            __fld_id = new global::NClassify.Example.SimpleInt32(global::System.Xml.XmlConvert.ToInt32(sbuilder.ToString()));
                            __has_id = true;
                            break;
                        }
                        case 1:
                        {
                            __fld_alphaGroup = new global::NClassify.Example.SimpleText(sbuilder.ToString());
                            __has_alphaGroup = true;
                            break;
                        }
                        case 2:
                        {
                            __fld_bytes = new global::NClassify.Example.SimpleBytes(global::NClassify.Library.ByteArray.FromBase64(sbuilder.ToString()));
                            __has_bytes = true;
                            break;
                        }
                        case 4:
                        {
                            __fld_enum = (global::NClassify.Example.SampleEnum)global::System.Enum.Parse(typeof(global::NClassify.Example.SampleEnum), sbuilder.ToString(), false);
                            __has_enum = true;
                            break;
                        }
                        case 5:
                        {
                            __fld_errors.Add(sbuilder.ToString());
                            break;
                        }
                        case 6:
                        {
                            __fld_uri = new global::NClassify.Example.SimpleUri(sbuilder.ToString());
                            __has_uri = true;
                            break;
                        }
                        case 7:
                        {
                            __fld_verified = global::System.Xml.XmlConvert.ToBoolean(sbuilder.ToString());
                            __has_verified = true;
                            break;
                        }
                        default:
                        {
                            break;
                        }
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("SampleMsg", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            if (__has_id)
            {
                writer.WriteElementString("Id", global::System.Xml.XmlConvert.ToString(__fld_id.Value));
            }
            if (__has_uri)
            {
                writer.WriteElementString("uri", __fld_uri.Value);
            }
            if (__has_alphaGroup)
            {
                writer.WriteElementString("alpha_group", __fld_alphaGroup.Value);
            }
            if (__has_enum)
            {
                writer.WriteElementString("enum", __fld_enum.ToString());
            }
            if (__has_bytes)
            {
                writer.WriteElementString("bytes", __fld_bytes.Value.ToBase64());
            }
            if (__has_verified)
            {
                writer.WriteElementString("verified", global::System.Xml.XmlConvert.ToString(__fld_verified));
            }
            foreach (string item in __fld_errors)
            {
                writer.WriteElementString("errors", item);
            }
            foreach (global::NClassify.Example.SampleMsg item in __fld_children)
            {
                item.WriteXml("children", writer);
            }
            writer.WriteFullEndElement();
        }
        #endregion
    }
    #endregion
    #region SingleFields
    [global::System.Xml.Serialization.XmlType("SingleFields")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
    public partial class SingleFields : global::System.ICloneable, global::System.Xml.Serialization.IXmlSerializable, global::NClassify.Library.IMessage
    {
        #region Static Data
        public static bool IsValidString(string value)
        {
            if (null == value) return false;
            return true;
        }
        public static bool IsValidSimpleInt32(global::NClassify.Example.SimpleInt32 value)
        {
            if (!value.IsValid()) return false;
            return true;
        }
        public static bool IsValidSimpleUri(global::NClassify.Example.SimpleUri value)
        {
            if (!value.IsValid()) return false;
            return true;
        }
        public static bool IsValidSimpleText(global::NClassify.Example.SimpleText value)
        {
            if (!value.IsValid()) return false;
            return true;
        }
        public static bool IsValidSimpleBytes(global::NClassify.Example.SimpleBytes value)
        {
            if (!value.IsValid()) return false;
            return true;
        }
        public static bool IsValidSampleMsg(global::NClassify.Example.SampleMsg value)
        {
            if (null == value) return false;
            if (!value.IsValid()) return false;
            return true;
        }
        #endregion
        #region Instance Fields
        private bool __has_bool;
        private bool __fld_bool = true;
        private bool __has_bytes;
        private global::NClassify.Library.ByteArray __fld_bytes = global::System.Convert.FromBase64String("asdf");
        private bool __has_int8;
        private sbyte __fld_int8 = (sbyte)1;
        private bool __has_uint8;
        private byte __fld_uint8 = (byte)1u;
        private bool __has_int16;
        private short __fld_int16 = (short)1;
        private bool __has_uint16;
        private ushort __fld_uint16 = (ushort)1u;
        private bool __has_int32;
        private int __fld_int32 = 1;
        private bool __has_uint32;
        private uint __fld_uint32 = 1U;
        private bool __has_int64;
        private long __fld_int64 = 1L;
        private bool __has_uint64;
        private ulong __fld_uint64 = 1UL;
        private bool __has_float;
        private float __fld_float = 1F;
        private bool __has_double;
        private double __fld_double = 1D;
        private bool __has_guid;
        private global::System.Guid __fld_guid = global::System.Guid.NewGuid();
        private bool __has_dateTime;
        private global::System.DateTime __fld_dateTime = global::System.DateTime.Now;
        private bool __has_timeSpan;
        private global::System.TimeSpan __fld_timeSpan = global::System.TimeSpan.Parse("1:00");
        private bool __has_string;
        private string __fld_string = "1";
        private bool __has_enum;
        private global::NClassify.Example.SampleEnum __fld_enum = global::NClassify.Example.SampleEnum.Two;
        private bool __has_simpleInt32;
        private global::NClassify.Example.SimpleInt32 __fld_simpleInt32 = new global::NClassify.Example.SimpleInt32(2);
        private bool __has_simpleUri;
        private global::NClassify.Example.SimpleUri __fld_simpleUri = new global::NClassify.Example.SimpleUri("http://example.uri");
        private bool __has_simpleText;
        private global::NClassify.Example.SimpleText __fld_simpleText = new global::NClassify.Example.SimpleText("def");
        private bool __has_simpleBytes;
        private global::NClassify.Example.SimpleBytes __fld_simpleBytes = new global::NClassify.Example.SimpleBytes(global::System.Convert.FromBase64String("AsdF12=="));
        private bool __has_sampleMsg;
        private global::NClassify.Example.SampleMsg __fld_sampleMsg = new global::NClassify.Example.SampleMsg();
        #endregion
        #region Instance Members
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasBool
        {
            get { return __has_bool; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_bool = true;
                __has_bool = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(true)]
        [global::System.Xml.Serialization.XmlElement("bool")]
        public bool Bool
        {
            get
            {
                return __fld_bool;
            }
            set
            {
                __fld_bool = value;
                __has_bool = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasBytes
        {
            get { return __has_bytes; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_bytes = global::System.Convert.FromBase64String("asdf");
                __has_bytes = false;
            }
        }
        [global::System.Xml.Serialization.XmlElement("bytes")]
        public global::NClassify.Library.ByteArray Bytes
        {
            get
            {
                return __fld_bytes;
            }
            set
            {
                __fld_bytes = value;
                __has_bytes = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasInt8
        {
            get { return __has_int8; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_int8 = (sbyte)1;
                __has_int8 = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute((sbyte)1)]
        [global::System.Xml.Serialization.XmlElement("int8")]
        public sbyte Int8
        {
            get
            {
                return __fld_int8;
            }
            set
            {
                __fld_int8 = value;
                __has_int8 = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasUint8
        {
            get { return __has_uint8; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_uint8 = (byte)1u;
                __has_uint8 = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute((byte)1u)]
        [global::System.Xml.Serialization.XmlElement("uint8")]
        public byte Uint8
        {
            get
            {
                return __fld_uint8;
            }
            set
            {
                __fld_uint8 = value;
                __has_uint8 = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasInt16
        {
            get { return __has_int16; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_int16 = (short)1;
                __has_int16 = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute((short)1)]
        [global::System.Xml.Serialization.XmlElement("int16")]
        public short Int16
        {
            get
            {
                return __fld_int16;
            }
            set
            {
                __fld_int16 = value;
                __has_int16 = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasUint16
        {
            get { return __has_uint16; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_uint16 = (ushort)1u;
                __has_uint16 = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute((ushort)1u)]
        [global::System.Xml.Serialization.XmlElement("uint16")]
        public ushort Uint16
        {
            get
            {
                return __fld_uint16;
            }
            set
            {
                __fld_uint16 = value;
                __has_uint16 = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasInt32
        {
            get { return __has_int32; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_int32 = 1;
                __has_int32 = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(1)]
        [global::System.Xml.Serialization.XmlElement("int32")]
        public int Int32
        {
            get
            {
                return __fld_int32;
            }
            set
            {
                __fld_int32 = value;
                __has_int32 = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasUint32
        {
            get { return __has_uint32; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_uint32 = 1U;
                __has_uint32 = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(1U)]
        [global::System.Xml.Serialization.XmlElement("uint32")]
        public uint Uint32
        {
            get
            {
                return __fld_uint32;
            }
            set
            {
                __fld_uint32 = value;
                __has_uint32 = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasInt64
        {
            get { return __has_int64; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_int64 = 1L;
                __has_int64 = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(1L)]
        [global::System.Xml.Serialization.XmlElement("int64")]
        public long Int64
        {
            get
            {
                return __fld_int64;
            }
            set
            {
                __fld_int64 = value;
                __has_int64 = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasUint64
        {
            get { return __has_uint64; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_uint64 = 1UL;
                __has_uint64 = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(1UL)]
        [global::System.Xml.Serialization.XmlElement("uint64")]
        public ulong Uint64
        {
            get
            {
                return __fld_uint64;
            }
            set
            {
                __fld_uint64 = value;
                __has_uint64 = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasFloat
        {
            get { return __has_float; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_float = 1F;
                __has_float = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(1F)]
        [global::System.Xml.Serialization.XmlElement("float")]
        public float Float
        {
            get
            {
                return __fld_float;
            }
            set
            {
                __fld_float = value;
                __has_float = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasDouble
        {
            get { return __has_double; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_double = 1D;
                __has_double = false;
            }
        }
        [global::System.ComponentModel.DefaultValueAttribute(1D)]
        [global::System.Xml.Serialization.XmlElement("double")]
        public double Double
        {
            get
            {
                return __fld_double;
            }
            set
            {
                __fld_double = value;
                __has_double = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasGuid
        {
            get { return __has_guid; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_guid = global::System.Guid.NewGuid();
                __has_guid = false;
            }
        }
        [global::System.Xml.Serialization.XmlElement("guid")]
        public global::System.Guid Guid
        {
            get
            {
                return __fld_guid;
            }
            set
            {
                __fld_guid = value;
                __has_guid = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasDateTime
        {
            get { return __has_dateTime; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_dateTime = global::System.DateTime.Now;
                __has_dateTime = false;
            }
        }
        [global::System.Xml.Serialization.XmlElement("dateTime")]
        public global::System.DateTime DateTime
        {
            get
            {
                return __fld_dateTime;
            }
            set
            {
                __fld_dateTime = value;
                __has_dateTime = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasTimeSpan
        {
            get { return __has_timeSpan; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_timeSpan = global::System.TimeSpan.Parse("1:00");
                __has_timeSpan = false;
            }
        }
        [global::System.Xml.Serialization.XmlElement("timeSpan")]
        public global::System.TimeSpan TimeSpan
        {
            get
            {
                return __fld_timeSpan;
            }
            set
            {
                __fld_timeSpan = value;
                __has_timeSpan = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasString
        {
            get { return __has_string; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_string = "1";
                __has_string = false;
            }
        }
        [global::System.Xml.Serialization.XmlElement("string")]
        public string String
        {
            get
            {
                return __fld_string;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("String");
                __fld_string = value;
                __has_string = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasEnum
        {
            get { return __has_enum; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_enum = global::NClassify.Example.SampleEnum.Two;
                __has_enum = false;
            }
        }
        [global::System.Xml.Serialization.XmlElement("enum")]
        public global::NClassify.Example.SampleEnum Enum
        {
            get
            {
                return __fld_enum;
            }
            set
            {
                __fld_enum = value;
                __has_enum = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasSimpleInt32
        {
            get { return __has_simpleInt32; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_simpleInt32 = new global::NClassify.Example.SimpleInt32(2);
                __has_simpleInt32 = false;
            }
        }
        [global::System.Xml.Serialization.XmlElement("simple_int32")]
        public global::NClassify.Example.SimpleInt32 SimpleInt32
        {
            get
            {
                return __fld_simpleInt32;
            }
            set
            {
                __fld_simpleInt32 = value;
                __has_simpleInt32 = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasSimpleUri
        {
            get { return __has_simpleUri; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_simpleUri = new global::NClassify.Example.SimpleUri("http://example.uri");
                __has_simpleUri = false;
            }
        }
        [global::System.Xml.Serialization.XmlElement("simple_uri")]
        public global::NClassify.Example.SimpleUri SimpleUri
        {
            get
            {
                return __fld_simpleUri;
            }
            set
            {
                __fld_simpleUri = value;
                __has_simpleUri = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasSimpleText
        {
            get { return __has_simpleText; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_simpleText = new global::NClassify.Example.SimpleText("def");
                __has_simpleText = false;
            }
        }
        [global::System.Xml.Serialization.XmlElement("simple_text")]
        public global::NClassify.Example.SimpleText SimpleText
        {
            get
            {
                return __fld_simpleText;
            }
            set
            {
                __fld_simpleText = value;
                __has_simpleText = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasSimpleBytes
        {
            get { return __has_simpleBytes; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_simpleBytes = new global::NClassify.Example.SimpleBytes(global::System.Convert.FromBase64String("AsdF12=="));
                __has_simpleBytes = false;
            }
        }
        [global::System.Xml.Serialization.XmlElement("simple_bytes")]
        public global::NClassify.Example.SimpleBytes SimpleBytes
        {
            get
            {
                return __fld_simpleBytes;
            }
            set
            {
                __fld_simpleBytes = value;
                __has_simpleBytes = true;
            }
        }
        [global::System.Xml.Serialization.XmlIgnore()]
        public bool HasSampleMsg
        {
            get { return __has_sampleMsg; }
            set
            {
                if (value) throw new global::System.InvalidOperationException();
                __fld_sampleMsg = new global::NClassify.Example.SampleMsg();
                __has_sampleMsg = false;
            }
        }
        [global::System.Xml.Serialization.XmlElement("sample_msg")]
        public global::NClassify.Example.SampleMsg SampleMsg
        {
            get
            {
                return __fld_sampleMsg;
            }
            set
            {
                if (null == value) throw new global::System.ArgumentNullException("SampleMsg");
                __fld_sampleMsg = value;
                __has_sampleMsg = true;
            }
        }
        public bool IsValid()
        {
            if (__has_string && !IsValidString(__fld_string)) return false;
            if (__has_simpleInt32 && !IsValidSimpleInt32(__fld_simpleInt32)) return false;
            if (__has_simpleUri && !IsValidSimpleUri(__fld_simpleUri)) return false;
            if (!__has_simpleText || !IsValidSimpleText(__fld_simpleText)) return false;
            if (__has_simpleBytes && !IsValidSimpleBytes(__fld_simpleBytes)) return false;
            if (__has_sampleMsg && !IsValidSampleMsg(__fld_sampleMsg)) return false;
             return true;
        }
        public void Initialize()
        {
            __has_bool = true;
            __has_bytes = true;
            __has_int8 = true;
            __has_uint8 = true;
            __has_int16 = true;
            __has_uint16 = true;
            __has_int32 = true;
            __has_uint32 = true;
            __has_int64 = true;
            __has_uint64 = true;
            __has_float = true;
            __has_double = true;
            __has_guid = true;
            __has_dateTime = true;
            __has_timeSpan = true;
            __has_string = true;
            __has_enum = true;
            __has_simpleInt32 = true;
            __has_simpleUri = true;
            __has_simpleText = true;
            __has_simpleBytes = true;
            __has_sampleMsg = true;
        }
        public void Clear()
        {
            __has_bool = false;
            __fld_bool = false;
            __has_bytes = false;
            __fld_bytes = new byte[0];
            __has_int8 = false;
            __fld_int8 = (sbyte)0;
            __has_uint8 = false;
            __fld_uint8 = (byte)0u;
            __has_int16 = false;
            __fld_int16 = (short)0;
            __has_uint16 = false;
            __fld_uint16 = (ushort)0u;
            __has_int32 = false;
            __fld_int32 = 0;
            __has_uint32 = false;
            __fld_uint32 = 0U;
            __has_int64 = false;
            __fld_int64 = 0L;
            __has_uint64 = false;
            __fld_uint64 = 0UL;
            __has_float = false;
            __fld_float = 0F;
            __has_double = false;
            __fld_double = 0D;
            __has_guid = false;
            __fld_guid = global::System.Guid.Empty;
            __has_dateTime = false;
            __fld_dateTime = global::System.DateTime.MinValue;
            __has_timeSpan = false;
            __fld_timeSpan = global::System.TimeSpan.Zero;
            __has_string = false;
            __fld_string = "";
            __has_enum = false;
            __fld_enum = default(global::NClassify.Example.SampleEnum);
            __has_simpleInt32 = false;
            __fld_simpleInt32 = new global::NClassify.Example.SimpleInt32(0);
            __has_simpleUri = false;
            __fld_simpleUri = new global::NClassify.Example.SimpleUri("");
            __has_simpleText = false;
            __fld_simpleText = new global::NClassify.Example.SimpleText("");
            __has_simpleBytes = false;
            __fld_simpleBytes = new global::NClassify.Example.SimpleBytes(new byte[0]);
            __has_sampleMsg = false;
            __fld_sampleMsg = new global::NClassify.Example.SampleMsg();
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        public SingleFields Clone()
        {
            SingleFields value = (SingleFields)this.MemberwiseClone();
            value.__fld_sampleMsg = value.__fld_sampleMsg.Clone();
            return value;
        }
        public void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is SingleFields) MergeFrom((SingleFields)other);
        }
        public void MergeFrom(SingleFields other)
        {
            if (other.__has_bool) __fld_bool = other.__fld_bool;
            if (other.__has_bytes) __fld_bytes = other.__fld_bytes;
            if (other.__has_int8) __fld_int8 = other.__fld_int8;
            if (other.__has_uint8) __fld_uint8 = other.__fld_uint8;
            if (other.__has_int16) __fld_int16 = other.__fld_int16;
            if (other.__has_uint16) __fld_uint16 = other.__fld_uint16;
            if (other.__has_int32) __fld_int32 = other.__fld_int32;
            if (other.__has_uint32) __fld_uint32 = other.__fld_uint32;
            if (other.__has_int64) __fld_int64 = other.__fld_int64;
            if (other.__has_uint64) __fld_uint64 = other.__fld_uint64;
            if (other.__has_float) __fld_float = other.__fld_float;
            if (other.__has_double) __fld_double = other.__fld_double;
            if (other.__has_guid) __fld_guid = other.__fld_guid;
            if (other.__has_dateTime) __fld_dateTime = other.__fld_dateTime;
            if (other.__has_timeSpan) __fld_timeSpan = other.__fld_timeSpan;
            if (other.__has_string) __fld_string = other.__fld_string;
            if (other.__has_enum) __fld_enum = other.__fld_enum;
            if (other.__has_simpleInt32) __fld_simpleInt32 = other.__fld_simpleInt32;
            if (other.__has_simpleUri) __fld_simpleUri = other.__fld_simpleUri;
            if (other.__has_simpleText) __fld_simpleText = other.__fld_simpleText;
            if (other.__has_simpleBytes) __fld_simpleBytes = other.__fld_simpleBytes;
            if (other.__has_sampleMsg) __fld_sampleMsg = other.__fld_sampleMsg;
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("SingleFields", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
            string[] fields = new string[] { "bool", "bytes", "dateTime", "double", "enum", "float", "guid", "int16", "int32", "int64", "int8", "sample_msg", "simple_bytes", "simple_int32", "simple_text", "simple_uri", "string", "timeSpan", "uint16", "uint32", "uint64", "uint8" };
            bool[] isMessage = new bool[] { false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false };
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
                bool isAttribute = reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
                if (!isElement && !isAttribute)
                {
                    reader.Read();
                    continue;
                }
                int field = global::System.Array.BinarySearch(fields, reader.LocalName, global::System.StringComparer.Ordinal);
                if (isElement && field >= 0 && isMessage[field])
                {
                    switch(field)
                    {
                        case 11:
                        {
                            __fld_sampleMsg.ReadXml(reader.LocalName, reader);
                            __has_sampleMsg = true;
                            break;
                        }
                    }
                }
                else
                {
                    sbuilder.Length = 0;
                    if (isAttribute)
                    {
                        sbuilder.Append(reader.Value);
                        if (!reader.MoveToNextAttribute())
                            reader.MoveToElement();
                    }
                    else if (reader.IsEmptyElement)
                        reader.ReadStartElement();
                    else
                    {
                        int stop = reader.Depth;
                        while (reader.Read() && reader.Depth > stop)
                        {
                            while (reader.IsStartElement()) reader.Skip();
                            if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                                sbuilder.Append(reader.Value);
                        }
                        reader.ReadEndElement();
                    }
                    switch(field)
                    {
                        case 0:
                        {
                            __fld_bool = global::System.Xml.XmlConvert.ToBoolean(sbuilder.ToString());
                            __has_bool = true;
                            break;
                        }
                        case 1:
                        {
                            __fld_bytes = global::NClassify.Library.ByteArray.FromBase64(sbuilder.ToString());
                            __has_bytes = true;
                            break;
                        }
                        case 2:
                        {
                            __fld_dateTime = global::System.Xml.XmlConvert.ToDateTime(sbuilder.ToString(), global::System.Xml.XmlDateTimeSerializationMode.RoundtripKind);
                            __has_dateTime = true;
                            break;
                        }
                        case 3:
                        {
                            __fld_double = global::System.Xml.XmlConvert.ToDouble(sbuilder.ToString());
                            __has_double = true;
                            break;
                        }
                        case 4:
                        {
                            __fld_enum = (global::NClassify.Example.SampleEnum)global::System.Enum.Parse(typeof(global::NClassify.Example.SampleEnum), sbuilder.ToString(), false);
                            __has_enum = true;
                            break;
                        }
                        case 5:
                        {
                            __fld_float = global::System.Xml.XmlConvert.ToSingle(sbuilder.ToString());
                            __has_float = true;
                            break;
                        }
                        case 6:
                        {
                            __fld_guid = global::System.Xml.XmlConvert.ToGuid(sbuilder.ToString());
                            __has_guid = true;
                            break;
                        }
                        case 7:
                        {
                            __fld_int16 = global::System.Xml.XmlConvert.ToInt16(sbuilder.ToString());
                            __has_int16 = true;
                            break;
                        }
                        case 8:
                        {
                            __fld_int32 = global::System.Xml.XmlConvert.ToInt32(sbuilder.ToString());
                            __has_int32 = true;
                            break;
                        }
                        case 9:
                        {
                            __fld_int64 = global::System.Xml.XmlConvert.ToInt64(sbuilder.ToString());
                            __has_int64 = true;
                            break;
                        }
                        case 10:
                        {
                            __fld_int8 = global::System.Xml.XmlConvert.ToSByte(sbuilder.ToString());
                            __has_int8 = true;
                            break;
                        }
                        case 12:
                        {
                            __fld_simpleBytes = new global::NClassify.Example.SimpleBytes(global::NClassify.Library.ByteArray.FromBase64(sbuilder.ToString()));
                            __has_simpleBytes = true;
                            break;
                        }
                        case 13:
                        {
                            __fld_simpleInt32 = new global::NClassify.Example.SimpleInt32(global::System.Xml.XmlConvert.ToInt32(sbuilder.ToString()));
                            __has_simpleInt32 = true;
                            break;
                        }
                        case 14:
                        {
                            __fld_simpleText = new global::NClassify.Example.SimpleText(sbuilder.ToString());
                            __has_simpleText = true;
                            break;
                        }
                        case 15:
                        {
                            __fld_simpleUri = new global::NClassify.Example.SimpleUri(sbuilder.ToString());
                            __has_simpleUri = true;
                            break;
                        }
                        case 16:
                        {
                            __fld_string = sbuilder.ToString();
                            __has_string = true;
                            break;
                        }
                        case 17:
                        {
                            __fld_timeSpan = global::System.Xml.XmlConvert.ToTimeSpan(sbuilder.ToString());
                            __has_timeSpan = true;
                            break;
                        }
                        case 18:
                        {
                            __fld_uint16 = global::System.Xml.XmlConvert.ToUInt16(sbuilder.ToString());
                            __has_uint16 = true;
                            break;
                        }
                        case 19:
                        {
                            __fld_uint32 = global::System.Xml.XmlConvert.ToUInt32(sbuilder.ToString());
                            __has_uint32 = true;
                            break;
                        }
                        case 20:
                        {
                            __fld_uint64 = global::System.Xml.XmlConvert.ToUInt64(sbuilder.ToString());
                            __has_uint64 = true;
                            break;
                        }
                        case 21:
                        {
                            __fld_uint8 = global::System.Xml.XmlConvert.ToByte(sbuilder.ToString());
                            __has_uint8 = true;
                            break;
                        }
                        default:
                        {
                            break;
                        }
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("SingleFields", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            if (__has_bool)
            {
                writer.WriteElementString("bool", global::System.Xml.XmlConvert.ToString(__fld_bool));
            }
            if (__has_bytes)
            {
                writer.WriteElementString("bytes", __fld_bytes.ToBase64());
            }
            if (__has_int8)
            {
                writer.WriteElementString("int8", global::System.Xml.XmlConvert.ToString(__fld_int8));
            }
            if (__has_uint8)
            {
                writer.WriteElementString("uint8", global::System.Xml.XmlConvert.ToString(__fld_uint8));
            }
            if (__has_int16)
            {
                writer.WriteElementString("int16", global::System.Xml.XmlConvert.ToString(__fld_int16));
            }
            if (__has_uint16)
            {
                writer.WriteElementString("uint16", global::System.Xml.XmlConvert.ToString(__fld_uint16));
            }
            if (__has_int32)
            {
                writer.WriteElementString("int32", global::System.Xml.XmlConvert.ToString(__fld_int32));
            }
            if (__has_uint32)
            {
                writer.WriteElementString("uint32", global::System.Xml.XmlConvert.ToString(__fld_uint32));
            }
            if (__has_int64)
            {
                writer.WriteElementString("int64", global::System.Xml.XmlConvert.ToString(__fld_int64));
            }
            if (__has_uint64)
            {
                writer.WriteElementString("uint64", global::System.Xml.XmlConvert.ToString(__fld_uint64));
            }
            if (__has_float)
            {
                writer.WriteElementString("float", global::System.Xml.XmlConvert.ToString(__fld_float));
            }
            if (__has_double)
            {
                writer.WriteElementString("double", global::System.Xml.XmlConvert.ToString(__fld_double));
            }
            if (__has_guid)
            {
                writer.WriteElementString("guid", global::System.Xml.XmlConvert.ToString(__fld_guid));
            }
            if (__has_dateTime)
            {
                writer.WriteElementString("dateTime", global::System.Xml.XmlConvert.ToString(__fld_dateTime, global::System.Xml.XmlDateTimeSerializationMode.RoundtripKind));
            }
            if (__has_timeSpan)
            {
                writer.WriteElementString("timeSpan", global::System.Xml.XmlConvert.ToString(__fld_timeSpan));
            }
            if (__has_string)
            {
                writer.WriteElementString("string", __fld_string);
            }
            if (__has_enum)
            {
                writer.WriteElementString("enum", __fld_enum.ToString());
            }
            if (__has_simpleInt32)
            {
                writer.WriteElementString("simple_int32", global::System.Xml.XmlConvert.ToString(__fld_simpleInt32.Value));
            }
            if (__has_simpleUri)
            {
                writer.WriteElementString("simple_uri", __fld_simpleUri.Value);
            }
            if (__has_simpleText)
            {
                writer.WriteElementString("simple_text", __fld_simpleText.Value);
            }
            if (__has_simpleBytes)
            {
                writer.WriteElementString("simple_bytes", __fld_simpleBytes.Value.ToBase64());
            }
            if (__has_sampleMsg)
            {
                __fld_sampleMsg.WriteXml("sample_msg", writer);
            }
            writer.WriteFullEndElement();
        }
        #endregion
    }
    #endregion
    #region ArrayFields
    [global::System.Xml.Serialization.XmlType("ArrayFields")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
    public partial class ArrayFields : global::System.ICloneable, global::System.Xml.Serialization.IXmlSerializable, global::NClassify.Library.IMessage
    {
        #region _BoolList
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _BoolList : global::System.Collections.Generic.IList<bool>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("BoolList");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<bool> _contents;
            public _BoolList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<bool>();
            }
            public _BoolList(global::System.Collections.Generic.IList<bool> contents, bool readOnly)
            {
                _readOnly = readOnly;
                _contents = new global::System.Collections.Generic.List<bool>(AssertNotNull(contents));
            }
            public _BoolList AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _BoolList(_contents, true);
            }
            private global::System.Collections.Generic.List<bool> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public bool this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(bool value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<bool> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, bool value) { Modify.Insert(index, value); }
            public bool Remove(bool item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(bool item) { return _contents.Contains(item); }
            public int IndexOf(bool item) { return _contents.IndexOf(item); }
            public void CopyTo(bool[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _BoolList Clone()
            {
                return new _BoolList(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<bool> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _BytesList
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _BytesList : global::System.Collections.Generic.IList<global::NClassify.Library.ByteArray>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("BytesList");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::NClassify.Library.ByteArray> _contents;
            public _BytesList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Library.ByteArray>();
            }
            public _BytesList(global::System.Collections.Generic.IList<global::NClassify.Library.ByteArray> contents, bool readOnly)
            {
                _readOnly = readOnly;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Library.ByteArray>(AssertNotNull(contents));
            }
            public _BytesList AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _BytesList(_contents, true);
            }
            private global::System.Collections.Generic.List<global::NClassify.Library.ByteArray> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::NClassify.Library.ByteArray this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::NClassify.Library.ByteArray value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::NClassify.Library.ByteArray> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::NClassify.Library.ByteArray value) { Modify.Insert(index, value); }
            public bool Remove(global::NClassify.Library.ByteArray item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::NClassify.Library.ByteArray item) { return _contents.Contains(item); }
            public int IndexOf(global::NClassify.Library.ByteArray item) { return _contents.IndexOf(item); }
            public void CopyTo(global::NClassify.Library.ByteArray[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _BytesList Clone()
            {
                return new _BytesList(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<global::NClassify.Library.ByteArray> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _Int8List
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _Int8List : global::System.Collections.Generic.IList<sbyte>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("Int8List");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<sbyte> _contents;
            public _Int8List()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<sbyte>();
            }
            public _Int8List(global::System.Collections.Generic.IList<sbyte> contents, bool readOnly)
            {
                _readOnly = readOnly;
                _contents = new global::System.Collections.Generic.List<sbyte>(AssertNotNull(contents));
            }
            public _Int8List AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _Int8List(_contents, true);
            }
            private global::System.Collections.Generic.List<sbyte> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public sbyte this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(sbyte value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<sbyte> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, sbyte value) { Modify.Insert(index, value); }
            public bool Remove(sbyte item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(sbyte item) { return _contents.Contains(item); }
            public int IndexOf(sbyte item) { return _contents.IndexOf(item); }
            public void CopyTo(sbyte[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _Int8List Clone()
            {
                return new _Int8List(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<sbyte> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _Uint8List
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _Uint8List : global::System.Collections.Generic.IList<byte>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("Uint8List");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<byte> _contents;
            public _Uint8List()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<byte>();
            }
            public _Uint8List(global::System.Collections.Generic.IList<byte> contents, bool readOnly)
            {
                _readOnly = readOnly;
                _contents = new global::System.Collections.Generic.List<byte>(AssertNotNull(contents));
            }
            public _Uint8List AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _Uint8List(_contents, true);
            }
            private global::System.Collections.Generic.List<byte> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public byte this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(byte value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<byte> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, byte value) { Modify.Insert(index, value); }
            public bool Remove(byte item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(byte item) { return _contents.Contains(item); }
            public int IndexOf(byte item) { return _contents.IndexOf(item); }
            public void CopyTo(byte[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _Uint8List Clone()
            {
                return new _Uint8List(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<byte> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _Int16List
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _Int16List : global::System.Collections.Generic.IList<short>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("Int16List");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<short> _contents;
            public _Int16List()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<short>();
            }
            public _Int16List(global::System.Collections.Generic.IList<short> contents, bool readOnly)
            {
                _readOnly = readOnly;
                _contents = new global::System.Collections.Generic.List<short>(AssertNotNull(contents));
            }
            public _Int16List AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _Int16List(_contents, true);
            }
            private global::System.Collections.Generic.List<short> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public short this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(short value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<short> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, short value) { Modify.Insert(index, value); }
            public bool Remove(short item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(short item) { return _contents.Contains(item); }
            public int IndexOf(short item) { return _contents.IndexOf(item); }
            public void CopyTo(short[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _Int16List Clone()
            {
                return new _Int16List(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<short> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _Uint16List
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _Uint16List : global::System.Collections.Generic.IList<ushort>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("Uint16List");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<ushort> _contents;
            public _Uint16List()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<ushort>();
            }
            public _Uint16List(global::System.Collections.Generic.IList<ushort> contents, bool readOnly)
            {
                _readOnly = readOnly;
                _contents = new global::System.Collections.Generic.List<ushort>(AssertNotNull(contents));
            }
            public _Uint16List AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _Uint16List(_contents, true);
            }
            private global::System.Collections.Generic.List<ushort> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public ushort this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(ushort value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<ushort> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, ushort value) { Modify.Insert(index, value); }
            public bool Remove(ushort item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(ushort item) { return _contents.Contains(item); }
            public int IndexOf(ushort item) { return _contents.IndexOf(item); }
            public void CopyTo(ushort[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _Uint16List Clone()
            {
                return new _Uint16List(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<ushort> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _Int32List
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _Int32List : global::System.Collections.Generic.IList<int>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("Int32List");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<int> _contents;
            public _Int32List()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<int>();
            }
            public _Int32List(global::System.Collections.Generic.IList<int> contents, bool readOnly)
            {
                _readOnly = readOnly;
                _contents = new global::System.Collections.Generic.List<int>(AssertNotNull(contents));
            }
            public _Int32List AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _Int32List(_contents, true);
            }
            private global::System.Collections.Generic.List<int> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public int this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(int value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<int> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, int value) { Modify.Insert(index, value); }
            public bool Remove(int item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(int item) { return _contents.Contains(item); }
            public int IndexOf(int item) { return _contents.IndexOf(item); }
            public void CopyTo(int[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _Int32List Clone()
            {
                return new _Int32List(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<int> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _Uint32List
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _Uint32List : global::System.Collections.Generic.IList<uint>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("Uint32List");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<uint> _contents;
            public _Uint32List()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<uint>();
            }
            public _Uint32List(global::System.Collections.Generic.IList<uint> contents, bool readOnly)
            {
                _readOnly = readOnly;
                _contents = new global::System.Collections.Generic.List<uint>(AssertNotNull(contents));
            }
            public _Uint32List AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _Uint32List(_contents, true);
            }
            private global::System.Collections.Generic.List<uint> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public uint this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(uint value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<uint> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, uint value) { Modify.Insert(index, value); }
            public bool Remove(uint item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(uint item) { return _contents.Contains(item); }
            public int IndexOf(uint item) { return _contents.IndexOf(item); }
            public void CopyTo(uint[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _Uint32List Clone()
            {
                return new _Uint32List(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<uint> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _Int64List
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _Int64List : global::System.Collections.Generic.IList<long>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("Int64List");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<long> _contents;
            public _Int64List()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<long>();
            }
            public _Int64List(global::System.Collections.Generic.IList<long> contents, bool readOnly)
            {
                _readOnly = readOnly;
                _contents = new global::System.Collections.Generic.List<long>(AssertNotNull(contents));
            }
            public _Int64List AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _Int64List(_contents, true);
            }
            private global::System.Collections.Generic.List<long> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public long this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(long value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<long> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, long value) { Modify.Insert(index, value); }
            public bool Remove(long item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(long item) { return _contents.Contains(item); }
            public int IndexOf(long item) { return _contents.IndexOf(item); }
            public void CopyTo(long[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _Int64List Clone()
            {
                return new _Int64List(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<long> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _Uint64List
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _Uint64List : global::System.Collections.Generic.IList<ulong>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("Uint64List");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<ulong> _contents;
            public _Uint64List()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<ulong>();
            }
            public _Uint64List(global::System.Collections.Generic.IList<ulong> contents, bool readOnly)
            {
                _readOnly = readOnly;
                _contents = new global::System.Collections.Generic.List<ulong>(AssertNotNull(contents));
            }
            public _Uint64List AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _Uint64List(_contents, true);
            }
            private global::System.Collections.Generic.List<ulong> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public ulong this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(ulong value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<ulong> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, ulong value) { Modify.Insert(index, value); }
            public bool Remove(ulong item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(ulong item) { return _contents.Contains(item); }
            public int IndexOf(ulong item) { return _contents.IndexOf(item); }
            public void CopyTo(ulong[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _Uint64List Clone()
            {
                return new _Uint64List(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<ulong> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _FloatList
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _FloatList : global::System.Collections.Generic.IList<float>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("FloatList");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<float> _contents;
            public _FloatList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<float>();
            }
            public _FloatList(global::System.Collections.Generic.IList<float> contents, bool readOnly)
            {
                _readOnly = readOnly;
                _contents = new global::System.Collections.Generic.List<float>(AssertNotNull(contents));
            }
            public _FloatList AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _FloatList(_contents, true);
            }
            private global::System.Collections.Generic.List<float> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public float this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(float value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<float> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, float value) { Modify.Insert(index, value); }
            public bool Remove(float item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(float item) { return _contents.Contains(item); }
            public int IndexOf(float item) { return _contents.IndexOf(item); }
            public void CopyTo(float[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _FloatList Clone()
            {
                return new _FloatList(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<float> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _DoubleList
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _DoubleList : global::System.Collections.Generic.IList<double>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("DoubleList");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<double> _contents;
            public _DoubleList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<double>();
            }
            public _DoubleList(global::System.Collections.Generic.IList<double> contents, bool readOnly)
            {
                _readOnly = readOnly;
                _contents = new global::System.Collections.Generic.List<double>(AssertNotNull(contents));
            }
            public _DoubleList AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _DoubleList(_contents, true);
            }
            private global::System.Collections.Generic.List<double> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public double this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(double value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<double> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, double value) { Modify.Insert(index, value); }
            public bool Remove(double item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(double item) { return _contents.Contains(item); }
            public int IndexOf(double item) { return _contents.IndexOf(item); }
            public void CopyTo(double[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _DoubleList Clone()
            {
                return new _DoubleList(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<double> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _GuidList
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _GuidList : global::System.Collections.Generic.IList<global::System.Guid>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("GuidList");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::System.Guid> _contents;
            public _GuidList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::System.Guid>();
            }
            public _GuidList(global::System.Collections.Generic.IList<global::System.Guid> contents, bool readOnly)
            {
                _readOnly = readOnly;
                _contents = new global::System.Collections.Generic.List<global::System.Guid>(AssertNotNull(contents));
            }
            public _GuidList AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _GuidList(_contents, true);
            }
            private global::System.Collections.Generic.List<global::System.Guid> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::System.Guid this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::System.Guid value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::System.Guid> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::System.Guid value) { Modify.Insert(index, value); }
            public bool Remove(global::System.Guid item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::System.Guid item) { return _contents.Contains(item); }
            public int IndexOf(global::System.Guid item) { return _contents.IndexOf(item); }
            public void CopyTo(global::System.Guid[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _GuidList Clone()
            {
                return new _GuidList(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<global::System.Guid> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _DateTimeList
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _DateTimeList : global::System.Collections.Generic.IList<global::System.DateTime>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("DateTimeList");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::System.DateTime> _contents;
            public _DateTimeList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::System.DateTime>();
            }
            public _DateTimeList(global::System.Collections.Generic.IList<global::System.DateTime> contents, bool readOnly)
            {
                _readOnly = readOnly;
                _contents = new global::System.Collections.Generic.List<global::System.DateTime>(AssertNotNull(contents));
            }
            public _DateTimeList AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _DateTimeList(_contents, true);
            }
            private global::System.Collections.Generic.List<global::System.DateTime> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::System.DateTime this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::System.DateTime value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::System.DateTime> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::System.DateTime value) { Modify.Insert(index, value); }
            public bool Remove(global::System.DateTime item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::System.DateTime item) { return _contents.Contains(item); }
            public int IndexOf(global::System.DateTime item) { return _contents.IndexOf(item); }
            public void CopyTo(global::System.DateTime[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _DateTimeList Clone()
            {
                return new _DateTimeList(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<global::System.DateTime> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _TimeSpanList
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _TimeSpanList : global::System.Collections.Generic.IList<global::System.TimeSpan>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("TimeSpanList");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::System.TimeSpan> _contents;
            public _TimeSpanList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::System.TimeSpan>();
            }
            public _TimeSpanList(global::System.Collections.Generic.IList<global::System.TimeSpan> contents, bool readOnly)
            {
                _readOnly = readOnly;
                _contents = new global::System.Collections.Generic.List<global::System.TimeSpan>(AssertNotNull(contents));
            }
            public _TimeSpanList AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _TimeSpanList(_contents, true);
            }
            private global::System.Collections.Generic.List<global::System.TimeSpan> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::System.TimeSpan this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::System.TimeSpan value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::System.TimeSpan> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::System.TimeSpan value) { Modify.Insert(index, value); }
            public bool Remove(global::System.TimeSpan item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::System.TimeSpan item) { return _contents.Contains(item); }
            public int IndexOf(global::System.TimeSpan item) { return _contents.IndexOf(item); }
            public void CopyTo(global::System.TimeSpan[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _TimeSpanList Clone()
            {
                return new _TimeSpanList(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<global::System.TimeSpan> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _StringList
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _StringList : global::System.Collections.Generic.IList<string>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("StringList");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<string> _contents;
            public _StringList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<string>();
            }
            public _StringList(global::System.Collections.Generic.IList<string> contents, bool readOnly)
            {
                _readOnly = readOnly;
                foreach (string item in AssertNotNull(contents)) AssertNotNull(item);
                _contents = new global::System.Collections.Generic.List<string>(AssertNotNull(contents));
            }
            public _StringList AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _StringList(_contents, true);
            }
            private global::System.Collections.Generic.List<string> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public string this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(string value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<string> value)
            {
                foreach (string item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, string value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(string item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(string item) { return _contents.Contains(item); }
            public int IndexOf(string item) { return _contents.IndexOf(item); }
            public void CopyTo(string[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _StringList Clone()
            {
                return new _StringList(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<string> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _EnumList
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _EnumList : global::System.Collections.Generic.IList<global::NClassify.Example.SampleEnum>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("EnumList");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::NClassify.Example.SampleEnum> _contents;
            public _EnumList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SampleEnum>();
            }
            public _EnumList(global::System.Collections.Generic.IList<global::NClassify.Example.SampleEnum> contents, bool readOnly)
            {
                _readOnly = readOnly;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SampleEnum>(AssertNotNull(contents));
            }
            public _EnumList AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _EnumList(_contents, true);
            }
            private global::System.Collections.Generic.List<global::NClassify.Example.SampleEnum> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::NClassify.Example.SampleEnum this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::NClassify.Example.SampleEnum value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::NClassify.Example.SampleEnum> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::NClassify.Example.SampleEnum value) { Modify.Insert(index, value); }
            public bool Remove(global::NClassify.Example.SampleEnum item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::NClassify.Example.SampleEnum item) { return _contents.Contains(item); }
            public int IndexOf(global::NClassify.Example.SampleEnum item) { return _contents.IndexOf(item); }
            public void CopyTo(global::NClassify.Example.SampleEnum[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _EnumList Clone()
            {
                return new _EnumList(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<global::NClassify.Example.SampleEnum> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _SimpleInt32List
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _SimpleInt32List : global::System.Collections.Generic.IList<global::NClassify.Example.SimpleInt32>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("SimpleInt32List");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::NClassify.Example.SimpleInt32> _contents;
            public _SimpleInt32List()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SimpleInt32>();
            }
            public _SimpleInt32List(global::System.Collections.Generic.IList<global::NClassify.Example.SimpleInt32> contents, bool readOnly)
            {
                _readOnly = readOnly;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SimpleInt32>(AssertNotNull(contents));
            }
            public _SimpleInt32List AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _SimpleInt32List(_contents, true);
            }
            private global::System.Collections.Generic.List<global::NClassify.Example.SimpleInt32> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::NClassify.Example.SimpleInt32 this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::NClassify.Example.SimpleInt32 value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::NClassify.Example.SimpleInt32> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::NClassify.Example.SimpleInt32 value) { Modify.Insert(index, value); }
            public bool Remove(global::NClassify.Example.SimpleInt32 item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::NClassify.Example.SimpleInt32 item) { return _contents.Contains(item); }
            public int IndexOf(global::NClassify.Example.SimpleInt32 item) { return _contents.IndexOf(item); }
            public void CopyTo(global::NClassify.Example.SimpleInt32[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _SimpleInt32List Clone()
            {
                return new _SimpleInt32List(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<global::NClassify.Example.SimpleInt32> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _SimpleUriList
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _SimpleUriList : global::System.Collections.Generic.IList<global::NClassify.Example.SimpleUri>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("SimpleUriList");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::NClassify.Example.SimpleUri> _contents;
            public _SimpleUriList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SimpleUri>();
            }
            public _SimpleUriList(global::System.Collections.Generic.IList<global::NClassify.Example.SimpleUri> contents, bool readOnly)
            {
                _readOnly = readOnly;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SimpleUri>(AssertNotNull(contents));
            }
            public _SimpleUriList AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _SimpleUriList(_contents, true);
            }
            private global::System.Collections.Generic.List<global::NClassify.Example.SimpleUri> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::NClassify.Example.SimpleUri this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::NClassify.Example.SimpleUri value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::NClassify.Example.SimpleUri> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::NClassify.Example.SimpleUri value) { Modify.Insert(index, value); }
            public bool Remove(global::NClassify.Example.SimpleUri item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::NClassify.Example.SimpleUri item) { return _contents.Contains(item); }
            public int IndexOf(global::NClassify.Example.SimpleUri item) { return _contents.IndexOf(item); }
            public void CopyTo(global::NClassify.Example.SimpleUri[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _SimpleUriList Clone()
            {
                return new _SimpleUriList(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<global::NClassify.Example.SimpleUri> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _SimpleTextList
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _SimpleTextList : global::System.Collections.Generic.IList<global::NClassify.Example.SimpleText>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("SimpleTextList");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::NClassify.Example.SimpleText> _contents;
            public _SimpleTextList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SimpleText>();
            }
            public _SimpleTextList(global::System.Collections.Generic.IList<global::NClassify.Example.SimpleText> contents, bool readOnly)
            {
                _readOnly = readOnly;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SimpleText>(AssertNotNull(contents));
            }
            public _SimpleTextList AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _SimpleTextList(_contents, true);
            }
            private global::System.Collections.Generic.List<global::NClassify.Example.SimpleText> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::NClassify.Example.SimpleText this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::NClassify.Example.SimpleText value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::NClassify.Example.SimpleText> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::NClassify.Example.SimpleText value) { Modify.Insert(index, value); }
            public bool Remove(global::NClassify.Example.SimpleText item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::NClassify.Example.SimpleText item) { return _contents.Contains(item); }
            public int IndexOf(global::NClassify.Example.SimpleText item) { return _contents.IndexOf(item); }
            public void CopyTo(global::NClassify.Example.SimpleText[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _SimpleTextList Clone()
            {
                return new _SimpleTextList(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<global::NClassify.Example.SimpleText> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _SimpleBytesList
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _SimpleBytesList : global::System.Collections.Generic.IList<global::NClassify.Example.SimpleBytes>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("SimpleBytesList");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::NClassify.Example.SimpleBytes> _contents;
            public _SimpleBytesList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SimpleBytes>();
            }
            public _SimpleBytesList(global::System.Collections.Generic.IList<global::NClassify.Example.SimpleBytes> contents, bool readOnly)
            {
                _readOnly = readOnly;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SimpleBytes>(AssertNotNull(contents));
            }
            public _SimpleBytesList AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _SimpleBytesList(_contents, true);
            }
            private global::System.Collections.Generic.List<global::NClassify.Example.SimpleBytes> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::NClassify.Example.SimpleBytes this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = value; }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::NClassify.Example.SimpleBytes value) { Modify.Add(value); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::NClassify.Example.SimpleBytes> value)
            {
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::NClassify.Example.SimpleBytes value) { Modify.Insert(index, value); }
            public bool Remove(global::NClassify.Example.SimpleBytes item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::NClassify.Example.SimpleBytes item) { return _contents.Contains(item); }
            public int IndexOf(global::NClassify.Example.SimpleBytes item) { return _contents.IndexOf(item); }
            public void CopyTo(global::NClassify.Example.SimpleBytes[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _SimpleBytesList Clone()
            {
                return new _SimpleBytesList(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<global::NClassify.Example.SimpleBytes> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region _SampleMsgList
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        partial class _SampleMsgList : global::System.Collections.Generic.IList<global::NClassify.Example.SampleMsg>, global::System.ICloneable
        {
            private static T AssertNotNull<T>(T value) where T : class
            {
                if (null == value) throw new global::System.ArgumentNullException("SampleMsgList");
                return value;
            }
            private readonly bool _readOnly;
            private readonly global::System.Collections.Generic.List<global::NClassify.Example.SampleMsg> _contents;
            public _SampleMsgList()
            {
                _readOnly = false;
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SampleMsg>();
            }
            public _SampleMsgList(global::System.Collections.Generic.IList<global::NClassify.Example.SampleMsg> contents, bool readOnly)
            {
                _readOnly = readOnly;
                foreach (global::NClassify.Example.SampleMsg item in AssertNotNull(contents)) AssertNotNull(item);
                _contents = new global::System.Collections.Generic.List<global::NClassify.Example.SampleMsg>(AssertNotNull(contents));
            }
            public _SampleMsgList AsReadOnly()
            {
                if (IsReadOnly) return this;
                return new _SampleMsgList(_contents, true);
            }
            private global::System.Collections.Generic.List<global::NClassify.Example.SampleMsg> Modify
            {
                get { if (!IsReadOnly) return _contents; throw new global::System.InvalidOperationException(); }
            }
            public global::NClassify.Example.SampleMsg this[int index]
            {
                get { return _contents[index]; }
                set { Modify[index] = AssertNotNull(value); }
            }
            public int Count { get { return _contents.Count; } }
            public bool IsReadOnly { get { return _readOnly; } }
            public void Add(global::NClassify.Example.SampleMsg value) { Modify.Add(AssertNotNull(value)); }
            public void AddRange(global::System.Collections.Generic.ICollection<global::NClassify.Example.SampleMsg> value)
            {
                foreach (global::NClassify.Example.SampleMsg item in AssertNotNull(value)) AssertNotNull(item);
                Modify.AddRange(AssertNotNull(value));
            }
            public void Insert(int index, global::NClassify.Example.SampleMsg value) { Modify.Insert(index, AssertNotNull(value)); }
            public bool Remove(global::NClassify.Example.SampleMsg item) { return Modify.Remove(item); }
            public void RemoveAt(int index) { Modify.RemoveAt(index); }
            public void Clear() { Modify.Clear(); }
            public bool Contains(global::NClassify.Example.SampleMsg item) { return _contents.Contains(item); }
            public int IndexOf(global::NClassify.Example.SampleMsg item) { return _contents.IndexOf(item); }
            public void CopyTo(global::NClassify.Example.SampleMsg[] array, int arrayIndex) { _contents.CopyTo(array, arrayIndex); }
            object global::System.ICloneable.Clone() { return Clone(); }
            public _SampleMsgList Clone()
            {
                return new _SampleMsgList(this, false);
            }
            public global::System.Collections.Generic.IEnumerator<global::NClassify.Example.SampleMsg> GetEnumerator()
            { return _contents.GetEnumerator(); }
            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
            { return ((global::System.Collections.IEnumerable)_contents).GetEnumerator(); }
        }
        #endregion
        #region Static Data
        public static bool IsValidString(string value)
        {
            if (null == value) return false;
            return true;
        }
        public static bool IsValidSimpleInt32(global::NClassify.Example.SimpleInt32 value)
        {
            if (!value.IsValid()) return false;
            return true;
        }
        public static bool IsValidSimpleUri(global::NClassify.Example.SimpleUri value)
        {
            if (!value.IsValid()) return false;
            return true;
        }
        public static bool IsValidSimpleText(global::NClassify.Example.SimpleText value)
        {
            if (!value.IsValid()) return false;
            return true;
        }
        public static bool IsValidSimpleBytes(global::NClassify.Example.SimpleBytes value)
        {
            if (!value.IsValid()) return false;
            return true;
        }
        public static bool IsValidSampleMsg(global::NClassify.Example.SampleMsg value)
        {
            if (null == value) return false;
            if (!value.IsValid()) return false;
            return true;
        }
        #endregion
        #region Instance Fields
        private _BoolList __fld_bool = new _BoolList();
        private _BytesList __fld_bytes = new _BytesList();
        private _Int8List __fld_int8 = new _Int8List();
        private _Uint8List __fld_uint8 = new _Uint8List();
        private _Int16List __fld_int16 = new _Int16List();
        private _Uint16List __fld_uint16 = new _Uint16List();
        private _Int32List __fld_int32 = new _Int32List();
        private _Uint32List __fld_uint32 = new _Uint32List();
        private _Int64List __fld_int64 = new _Int64List();
        private _Uint64List __fld_uint64 = new _Uint64List();
        private _FloatList __fld_float = new _FloatList();
        private _DoubleList __fld_double = new _DoubleList();
        private _GuidList __fld_guid = new _GuidList();
        private _DateTimeList __fld_dateTime = new _DateTimeList();
        private _TimeSpanList __fld_timeSpan = new _TimeSpanList();
        private _StringList __fld_string = new _StringList();
        private _EnumList __fld_enum = new _EnumList();
        private _SimpleInt32List __fld_simpleInt32 = new _SimpleInt32List();
        private _SimpleUriList __fld_simpleUri = new _SimpleUriList();
        private _SimpleTextList __fld_simpleText = new _SimpleTextList();
        private _SimpleBytesList __fld_simpleBytes = new _SimpleBytesList();
        private _SampleMsgList __fld_sampleMsg = new _SampleMsgList();
        #endregion
        #region Instance Members
        [global::System.Xml.Serialization.XmlElement("bool")]
        public global::System.Collections.Generic.IList<bool> BoolList
        {
            get
            {
                return __fld_bool;
            }
            set
            {
                __fld_bool = new _BoolList(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("bytes")]
        public global::System.Collections.Generic.IList<global::NClassify.Library.ByteArray> BytesList
        {
            get
            {
                return __fld_bytes;
            }
            set
            {
                __fld_bytes = new _BytesList(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("int8")]
        public global::System.Collections.Generic.IList<sbyte> Int8List
        {
            get
            {
                return __fld_int8;
            }
            set
            {
                __fld_int8 = new _Int8List(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("uint8")]
        public global::System.Collections.Generic.IList<byte> Uint8List
        {
            get
            {
                return __fld_uint8;
            }
            set
            {
                __fld_uint8 = new _Uint8List(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("int16")]
        public global::System.Collections.Generic.IList<short> Int16List
        {
            get
            {
                return __fld_int16;
            }
            set
            {
                __fld_int16 = new _Int16List(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("uint16")]
        public global::System.Collections.Generic.IList<ushort> Uint16List
        {
            get
            {
                return __fld_uint16;
            }
            set
            {
                __fld_uint16 = new _Uint16List(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("int32")]
        public global::System.Collections.Generic.IList<int> Int32List
        {
            get
            {
                return __fld_int32;
            }
            set
            {
                __fld_int32 = new _Int32List(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("uint32")]
        public global::System.Collections.Generic.IList<uint> Uint32List
        {
            get
            {
                return __fld_uint32;
            }
            set
            {
                __fld_uint32 = new _Uint32List(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("int64")]
        public global::System.Collections.Generic.IList<long> Int64List
        {
            get
            {
                return __fld_int64;
            }
            set
            {
                __fld_int64 = new _Int64List(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("uint64")]
        public global::System.Collections.Generic.IList<ulong> Uint64List
        {
            get
            {
                return __fld_uint64;
            }
            set
            {
                __fld_uint64 = new _Uint64List(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("float")]
        public global::System.Collections.Generic.IList<float> FloatList
        {
            get
            {
                return __fld_float;
            }
            set
            {
                __fld_float = new _FloatList(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("double")]
        public global::System.Collections.Generic.IList<double> DoubleList
        {
            get
            {
                return __fld_double;
            }
            set
            {
                __fld_double = new _DoubleList(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("guid")]
        public global::System.Collections.Generic.IList<global::System.Guid> GuidList
        {
            get
            {
                return __fld_guid;
            }
            set
            {
                __fld_guid = new _GuidList(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("dateTime")]
        public global::System.Collections.Generic.IList<global::System.DateTime> DateTimeList
        {
            get
            {
                return __fld_dateTime;
            }
            set
            {
                __fld_dateTime = new _DateTimeList(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("timeSpan")]
        public global::System.Collections.Generic.IList<global::System.TimeSpan> TimeSpanList
        {
            get
            {
                return __fld_timeSpan;
            }
            set
            {
                __fld_timeSpan = new _TimeSpanList(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("string")]
        public global::System.Collections.Generic.IList<string> StringList
        {
            get
            {
                return __fld_string;
            }
            set
            {
                __fld_string = new _StringList(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("enum")]
        public global::System.Collections.Generic.IList<global::NClassify.Example.SampleEnum> EnumList
        {
            get
            {
                return __fld_enum;
            }
            set
            {
                __fld_enum = new _EnumList(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("simple_int32")]
        public global::System.Collections.Generic.IList<global::NClassify.Example.SimpleInt32> SimpleInt32List
        {
            get
            {
                return __fld_simpleInt32;
            }
            set
            {
                __fld_simpleInt32 = new _SimpleInt32List(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("simple_uri")]
        public global::System.Collections.Generic.IList<global::NClassify.Example.SimpleUri> SimpleUriList
        {
            get
            {
                return __fld_simpleUri;
            }
            set
            {
                __fld_simpleUri = new _SimpleUriList(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("simple_text")]
        public global::System.Collections.Generic.IList<global::NClassify.Example.SimpleText> SimpleTextList
        {
            get
            {
                return __fld_simpleText;
            }
            set
            {
                __fld_simpleText = new _SimpleTextList(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("simple_bytes")]
        public global::System.Collections.Generic.IList<global::NClassify.Example.SimpleBytes> SimpleBytesList
        {
            get
            {
                return __fld_simpleBytes;
            }
            set
            {
                __fld_simpleBytes = new _SimpleBytesList(value, false);
            }
        }
        [global::System.Xml.Serialization.XmlElement("sample_msg")]
        public global::System.Collections.Generic.IList<global::NClassify.Example.SampleMsg> SampleMsgList
        {
            get
            {
                return __fld_sampleMsg;
            }
            set
            {
                __fld_sampleMsg = new _SampleMsgList(value, false);
            }
        }
        public bool IsValid()
        {
            foreach (string item in __fld_string)
            {
                if (!IsValidString(item)) return false;
            }
            foreach (global::NClassify.Example.SimpleInt32 item in __fld_simpleInt32)
            {
                if (!IsValidSimpleInt32(item)) return false;
            }
            foreach (global::NClassify.Example.SimpleUri item in __fld_simpleUri)
            {
                if (!IsValidSimpleUri(item)) return false;
            }
            foreach (global::NClassify.Example.SimpleText item in __fld_simpleText)
            {
                if (!IsValidSimpleText(item)) return false;
            }
            foreach (global::NClassify.Example.SimpleBytes item in __fld_simpleBytes)
            {
                if (!IsValidSimpleBytes(item)) return false;
            }
            foreach (global::NClassify.Example.SampleMsg item in __fld_sampleMsg)
            {
                if (!IsValidSampleMsg(item)) return false;
            }
             return true;
        }
        public void Initialize()
        {
        }
        public void Clear()
        {
            __fld_bool = new _BoolList();
            __fld_bytes = new _BytesList();
            __fld_int8 = new _Int8List();
            __fld_uint8 = new _Uint8List();
            __fld_int16 = new _Int16List();
            __fld_uint16 = new _Uint16List();
            __fld_int32 = new _Int32List();
            __fld_uint32 = new _Uint32List();
            __fld_int64 = new _Int64List();
            __fld_uint64 = new _Uint64List();
            __fld_float = new _FloatList();
            __fld_double = new _DoubleList();
            __fld_guid = new _GuidList();
            __fld_dateTime = new _DateTimeList();
            __fld_timeSpan = new _TimeSpanList();
            __fld_string = new _StringList();
            __fld_enum = new _EnumList();
            __fld_simpleInt32 = new _SimpleInt32List();
            __fld_simpleUri = new _SimpleUriList();
            __fld_simpleText = new _SimpleTextList();
            __fld_simpleBytes = new _SimpleBytesList();
            __fld_sampleMsg = new _SampleMsgList();
        }
        object global::System.ICloneable.Clone() { return Clone(); }
        public ArrayFields Clone()
        {
            ArrayFields value = (ArrayFields)this.MemberwiseClone();
            value.__fld_bool = value.__fld_bool.Clone();
            value.__fld_bytes = value.__fld_bytes.Clone();
            value.__fld_int8 = value.__fld_int8.Clone();
            value.__fld_uint8 = value.__fld_uint8.Clone();
            value.__fld_int16 = value.__fld_int16.Clone();
            value.__fld_uint16 = value.__fld_uint16.Clone();
            value.__fld_int32 = value.__fld_int32.Clone();
            value.__fld_uint32 = value.__fld_uint32.Clone();
            value.__fld_int64 = value.__fld_int64.Clone();
            value.__fld_uint64 = value.__fld_uint64.Clone();
            value.__fld_float = value.__fld_float.Clone();
            value.__fld_double = value.__fld_double.Clone();
            value.__fld_guid = value.__fld_guid.Clone();
            value.__fld_dateTime = value.__fld_dateTime.Clone();
            value.__fld_timeSpan = value.__fld_timeSpan.Clone();
            value.__fld_string = value.__fld_string.Clone();
            value.__fld_enum = value.__fld_enum.Clone();
            value.__fld_simpleInt32 = value.__fld_simpleInt32.Clone();
            value.__fld_simpleUri = value.__fld_simpleUri.Clone();
            value.__fld_simpleText = value.__fld_simpleText.Clone();
            value.__fld_simpleBytes = value.__fld_simpleBytes.Clone();
            value.__fld_sampleMsg = value.__fld_sampleMsg.Clone();
            return value;
        }
        public void MergeFrom(global::NClassify.Library.IMessage other)
        {
            if (other is ArrayFields) MergeFrom((ArrayFields)other);
        }
        public void MergeFrom(ArrayFields other)
        {
            __fld_bool.AddRange(other.__fld_bool);
            __fld_bytes.AddRange(other.__fld_bytes);
            __fld_int8.AddRange(other.__fld_int8);
            __fld_uint8.AddRange(other.__fld_uint8);
            __fld_int16.AddRange(other.__fld_int16);
            __fld_uint16.AddRange(other.__fld_uint16);
            __fld_int32.AddRange(other.__fld_int32);
            __fld_uint32.AddRange(other.__fld_uint32);
            __fld_int64.AddRange(other.__fld_int64);
            __fld_uint64.AddRange(other.__fld_uint64);
            __fld_float.AddRange(other.__fld_float);
            __fld_double.AddRange(other.__fld_double);
            __fld_guid.AddRange(other.__fld_guid);
            __fld_dateTime.AddRange(other.__fld_dateTime);
            __fld_timeSpan.AddRange(other.__fld_timeSpan);
            __fld_string.AddRange(other.__fld_string);
            __fld_enum.AddRange(other.__fld_enum);
            __fld_simpleInt32.AddRange(other.__fld_simpleInt32);
            __fld_simpleUri.AddRange(other.__fld_simpleUri);
            __fld_simpleText.AddRange(other.__fld_simpleText);
            __fld_simpleBytes.AddRange(other.__fld_simpleBytes);
            __fld_sampleMsg.AddRange(other.__fld_sampleMsg);
        }
        global::System.Xml.Schema.XmlSchema global::System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            return null;
        }
        public void ReadXml(global::System.Xml.XmlReader reader)
        {
            ReadXml("ArrayFields", reader);
        }
        public void ReadXml(string localName, global::System.Xml.XmlReader reader)
        {
            reader.MoveToContent();
            if (!reader.IsStartElement(localName))
                throw new global::System.FormatException();
            if (reader.MoveToFirstAttribute())
                MergeFrom(reader);
            bool empty = reader.IsEmptyElement;
            reader.ReadStartElement(localName);
            if (!empty)
            {
                MergeFrom(reader);
                reader.ReadEndElement();
            }
        }
        public void MergeFrom(global::System.Xml.XmlReader reader)
        {
            int depth = reader.Depth;
            global::System.Text.StringBuilder sbuilder = new global::System.Text.StringBuilder();
            string[] fields = new string[] { "bool", "bytes", "dateTime", "double", "enum", "float", "guid", "int16", "int32", "int64", "int8", "sample_msg", "simple_bytes", "simple_int32", "simple_text", "simple_uri", "string", "timeSpan", "uint16", "uint32", "uint64", "uint8" };
            bool[] isMessage = new bool[] { false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false };
            while (!reader.EOF && reader.Depth >= depth)
            {
                if (reader.NodeType == global::System.Xml.XmlNodeType.EndElement) break;
                bool isElement = reader.NodeType == global::System.Xml.XmlNodeType.Element;
                bool isAttribute = reader.NodeType == global::System.Xml.XmlNodeType.Attribute;
                if (!isElement && !isAttribute)
                {
                    reader.Read();
                    continue;
                }
                int field = global::System.Array.BinarySearch(fields, reader.LocalName, global::System.StringComparer.Ordinal);
                if (isElement && field >= 0 && isMessage[field])
                {
                    switch(field)
                    {
                        case 11:
                        {
                            global::NClassify.Example.SampleMsg child = new global::NClassify.Example.SampleMsg();
                            child.ReadXml(reader.LocalName, reader);
                            __fld_sampleMsg.Add(child);
                            break;
                        }
                    }
                }
                else
                {
                    sbuilder.Length = 0;
                    if (isAttribute)
                    {
                        sbuilder.Append(reader.Value);
                        if (!reader.MoveToNextAttribute())
                            reader.MoveToElement();
                    }
                    else if (reader.IsEmptyElement)
                        reader.ReadStartElement();
                    else
                    {
                        int stop = reader.Depth;
                        while (reader.Read() && reader.Depth > stop)
                        {
                            while (reader.IsStartElement()) reader.Skip();
                            if (((1 << (int)reader.NodeType) & 0x6018) != 0)
                                sbuilder.Append(reader.Value);
                        }
                        reader.ReadEndElement();
                    }
                    switch(field)
                    {
                        case 0:
                        {
                            __fld_bool.Add(global::System.Xml.XmlConvert.ToBoolean(sbuilder.ToString()));
                            break;
                        }
                        case 1:
                        {
                            __fld_bytes.Add(global::NClassify.Library.ByteArray.FromBase64(sbuilder.ToString()));
                            break;
                        }
                        case 2:
                        {
                            __fld_dateTime.Add(global::System.Xml.XmlConvert.ToDateTime(sbuilder.ToString(), global::System.Xml.XmlDateTimeSerializationMode.RoundtripKind));
                            break;
                        }
                        case 3:
                        {
                            __fld_double.Add(global::System.Xml.XmlConvert.ToDouble(sbuilder.ToString()));
                            break;
                        }
                        case 4:
                        {
                            __fld_enum.Add((global::NClassify.Example.SampleEnum)global::System.Enum.Parse(typeof(global::NClassify.Example.SampleEnum), sbuilder.ToString(), false));
                            break;
                        }
                        case 5:
                        {
                            __fld_float.Add(global::System.Xml.XmlConvert.ToSingle(sbuilder.ToString()));
                            break;
                        }
                        case 6:
                        {
                            __fld_guid.Add(global::System.Xml.XmlConvert.ToGuid(sbuilder.ToString()));
                            break;
                        }
                        case 7:
                        {
                            __fld_int16.Add(global::System.Xml.XmlConvert.ToInt16(sbuilder.ToString()));
                            break;
                        }
                        case 8:
                        {
                            __fld_int32.Add(global::System.Xml.XmlConvert.ToInt32(sbuilder.ToString()));
                            break;
                        }
                        case 9:
                        {
                            __fld_int64.Add(global::System.Xml.XmlConvert.ToInt64(sbuilder.ToString()));
                            break;
                        }
                        case 10:
                        {
                            __fld_int8.Add(global::System.Xml.XmlConvert.ToSByte(sbuilder.ToString()));
                            break;
                        }
                        case 12:
                        {
                            __fld_simpleBytes.Add(new global::NClassify.Example.SimpleBytes(global::NClassify.Library.ByteArray.FromBase64(sbuilder.ToString())));
                            break;
                        }
                        case 13:
                        {
                            __fld_simpleInt32.Add(new global::NClassify.Example.SimpleInt32(global::System.Xml.XmlConvert.ToInt32(sbuilder.ToString())));
                            break;
                        }
                        case 14:
                        {
                            __fld_simpleText.Add(new global::NClassify.Example.SimpleText(sbuilder.ToString()));
                            break;
                        }
                        case 15:
                        {
                            __fld_simpleUri.Add(new global::NClassify.Example.SimpleUri(sbuilder.ToString()));
                            break;
                        }
                        case 16:
                        {
                            __fld_string.Add(sbuilder.ToString());
                            break;
                        }
                        case 17:
                        {
                            __fld_timeSpan.Add(global::System.Xml.XmlConvert.ToTimeSpan(sbuilder.ToString()));
                            break;
                        }
                        case 18:
                        {
                            __fld_uint16.Add(global::System.Xml.XmlConvert.ToUInt16(sbuilder.ToString()));
                            break;
                        }
                        case 19:
                        {
                            __fld_uint32.Add(global::System.Xml.XmlConvert.ToUInt32(sbuilder.ToString()));
                            break;
                        }
                        case 20:
                        {
                            __fld_uint64.Add(global::System.Xml.XmlConvert.ToUInt64(sbuilder.ToString()));
                            break;
                        }
                        case 21:
                        {
                            __fld_uint8.Add(global::System.Xml.XmlConvert.ToByte(sbuilder.ToString()));
                            break;
                        }
                        default:
                        {
                            break;
                        }
                    }
                }
            }
        }
        public void WriteXml(global::System.Xml.XmlWriter writer)
        {
            WriteXml("ArrayFields", writer);
        }
        public void WriteXml(string localName, global::System.Xml.XmlWriter writer)
        {
            writer.WriteStartElement(localName);
            foreach (bool item in __fld_bool)
            {
                writer.WriteElementString("bool", global::System.Xml.XmlConvert.ToString(item));
            }
            foreach (global::NClassify.Library.ByteArray item in __fld_bytes)
            {
                writer.WriteElementString("bytes", item.ToBase64());
            }
            foreach (sbyte item in __fld_int8)
            {
                writer.WriteElementString("int8", global::System.Xml.XmlConvert.ToString(item));
            }
            foreach (byte item in __fld_uint8)
            {
                writer.WriteElementString("uint8", global::System.Xml.XmlConvert.ToString(item));
            }
            foreach (short item in __fld_int16)
            {
                writer.WriteElementString("int16", global::System.Xml.XmlConvert.ToString(item));
            }
            foreach (ushort item in __fld_uint16)
            {
                writer.WriteElementString("uint16", global::System.Xml.XmlConvert.ToString(item));
            }
            foreach (int item in __fld_int32)
            {
                writer.WriteElementString("int32", global::System.Xml.XmlConvert.ToString(item));
            }
            foreach (uint item in __fld_uint32)
            {
                writer.WriteElementString("uint32", global::System.Xml.XmlConvert.ToString(item));
            }
            foreach (long item in __fld_int64)
            {
                writer.WriteElementString("int64", global::System.Xml.XmlConvert.ToString(item));
            }
            foreach (ulong item in __fld_uint64)
            {
                writer.WriteElementString("uint64", global::System.Xml.XmlConvert.ToString(item));
            }
            foreach (float item in __fld_float)
            {
                writer.WriteElementString("float", global::System.Xml.XmlConvert.ToString(item));
            }
            foreach (double item in __fld_double)
            {
                writer.WriteElementString("double", global::System.Xml.XmlConvert.ToString(item));
            }
            foreach (global::System.Guid item in __fld_guid)
            {
                writer.WriteElementString("guid", global::System.Xml.XmlConvert.ToString(item));
            }
            foreach (global::System.DateTime item in __fld_dateTime)
            {
                writer.WriteElementString("dateTime", global::System.Xml.XmlConvert.ToString(item, global::System.Xml.XmlDateTimeSerializationMode.RoundtripKind));
            }
            foreach (global::System.TimeSpan item in __fld_timeSpan)
            {
                writer.WriteElementString("timeSpan", global::System.Xml.XmlConvert.ToString(item));
            }
            foreach (string item in __fld_string)
            {
                writer.WriteElementString("string", item);
            }
            foreach (global::NClassify.Example.SampleEnum item in __fld_enum)
            {
                writer.WriteElementString("enum", item.ToString());
            }
            foreach (global::NClassify.Example.SimpleInt32 item in __fld_simpleInt32)
            {
                writer.WriteElementString("simple_int32", global::System.Xml.XmlConvert.ToString(item.Value));
            }
            foreach (global::NClassify.Example.SimpleUri item in __fld_simpleUri)
            {
                writer.WriteElementString("simple_uri", item.Value);
            }
            foreach (global::NClassify.Example.SimpleText item in __fld_simpleText)
            {
                writer.WriteElementString("simple_text", item.Value);
            }
            foreach (global::NClassify.Example.SimpleBytes item in __fld_simpleBytes)
            {
                writer.WriteElementString("simple_bytes", item.Value.ToBase64());
            }
            foreach (global::NClassify.Example.SampleMsg item in __fld_sampleMsg)
            {
                item.WriteXml("sample_msg", writer);
            }
            writer.WriteFullEndElement();
        }
        #endregion
    }
    #endregion
    #region ExampleService
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
    public partial interface IExampleService
    {
        void Ping();
        global::NClassify.Example.SampleMsg Get();
        global::NClassify.Example.SampleMsg Put(global::NClassify.Example.SampleMsg sampleMsg);
        void Delete(global::NClassify.Example.SampleMsg sampleMsg);
    }
    [global::System.Xml.Serialization.XmlType("ExampleService")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
    public partial class ExampleService : IExampleService, global::NClassify.Library.IDispatchStub
    {
        private bool _dispose;
        private readonly global::NClassify.Library.IDispatchStub _dispatch;
        public ExampleService(global::NClassify.Library.IDispatchStub dispatch)
            : this(dispatch, true) { }
        public ExampleService(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
        {
            if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
            _dispatch = dispatch;
            _dispose = dispose;
        }
        public void Dispose()
        {
            if (_dispose)
            {
                _dispose = false;
                _dispatch.Dispose();
            }
        }
        protected virtual void Invoke<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IMessage
        {
            if (_dispose) throw new global::System.ObjectDisposedException(GetType().FullName);
            _dispatch.CallMethod(methodName, request, response);
        }
        void global::NClassify.Library.IDispatchStub.CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) 
        {
            Invoke(methodName, request, response);
        }
        public void Ping()
        {
            Invoke("Ping", global::NClassify.Library.EmptyMessage.Default, global::NClassify.Library.EmptyMessage.Default);
        }
        public global::NClassify.Example.SampleMsg Get()
        {
            global::NClassify.Example.SampleMsg response = new global::NClassify.Example.SampleMsg();
            Invoke("Get", global::NClassify.Library.EmptyMessage.Default, response);
            return response;
        }
        public global::NClassify.Example.SampleMsg Put(global::NClassify.Example.SampleMsg sampleMsg)
        {
            global::NClassify.Example.SampleMsg response = new global::NClassify.Example.SampleMsg();
            Invoke("Put", sampleMsg, response);
            return response;
        }
        public void Delete(global::NClassify.Example.SampleMsg sampleMsg)
        {
            Invoke("Delete", sampleMsg, global::NClassify.Library.EmptyMessage.Default);
        }
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        public partial class Dispatch : global::NClassify.Library.IDispatchStub
        {
            private bool _dispose;
            private readonly IExampleService _dispatch;
            public Dispatch(IExampleService dispatch)
                : this(dispatch, true) { }
            public Dispatch(IExampleService dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose && dispatch is global::System.IDisposable;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    ((global::System.IDisposable)_dispatch).Dispose();
                }
            }
            public void CallMethod<TRequest, TResponse>(string methodName, TRequest request, TResponse response) where TRequest : class, global::NClassify.Library.IMessage where TResponse : class, global::NClassify.Library.IMessage
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "Delete", "Get", "Ping", "Put" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        _dispatch.Delete((global::NClassify.Example.SampleMsg)(object)request);
                        break;
                    }
                    case 1:
                    {
                        response.MergeFrom(_dispatch.Get());
                        break;
                    }
                    case 2:
                    {
                        _dispatch.Ping();
                        break;
                    }
                    case 3:
                    {
                        response.MergeFrom(_dispatch.Put((global::NClassify.Example.SampleMsg)(object)request));
                        break;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IExampleService).FullName, methodName);
                    }
                }
            }
        }
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("NClassify.Generator", "1.0")]
        public partial class ServerStub : global::NClassify.Library.IServerStub
        {
            private bool _dispose;
            private readonly global::NClassify.Library.IDispatchStub _dispatch;
            public ServerStub(IExampleService dispatch)
                : this(new Dispatch(dispatch), true) { }
            public ServerStub(IExampleService dispatch, bool dispose)
                : this(new Dispatch(dispatch), dispose) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch)
                : this(dispatch, true) { }
            public ServerStub(global::NClassify.Library.IDispatchStub dispatch, bool dispose)
            {
                if (dispatch == null) throw new global::System.ArgumentNullException("dispatch");
                _dispatch = dispatch;
                _dispose = dispose;
            }
            public void Dispose()
            {
                if (_dispose)
                {
                    _dispose = false;
                    _dispatch.Dispose();
                }
            }
            public global::NClassify.Library.IMessage CallMethod(string methodName, global::System.Action<global::NClassify.Library.IMessage> readInput)
            {
                int ordinal = global::System.Array.BinarySearch(new string[] { "Delete", "Get", "Ping", "Put" }, methodName, global::System.StringComparer.Ordinal);
                switch(ordinal)
                {
                    case 0:
                    {
                        global::NClassify.Example.SampleMsg request = new global::NClassify.Example.SampleMsg();
                        readInput(request);
                        _dispatch.CallMethod(methodName, request, global::NClassify.Library.EmptyMessage.Default);
                        return global::NClassify.Library.EmptyMessage.Default;
                    }
                    case 1:
                    {
                        global::NClassify.Example.SampleMsg response = new global::NClassify.Example.SampleMsg();
                        _dispatch.CallMethod(methodName, global::NClassify.Library.EmptyMessage.Default, response);
                        return response;
                    }
                    case 2:
                    {
                        _dispatch.CallMethod(methodName, global::NClassify.Library.EmptyMessage.Default, global::NClassify.Library.EmptyMessage.Default);
                        return global::NClassify.Library.EmptyMessage.Default;
                    }
                    case 3:
                    {
                        global::NClassify.Example.SampleMsg request = new global::NClassify.Example.SampleMsg();
                        readInput(request);
                        global::NClassify.Example.SampleMsg response = new global::NClassify.Example.SampleMsg();
                        _dispatch.CallMethod(methodName, request, response);
                        return response;
                    }
                    default:
                    {
                        throw new global::System.MissingMethodException(typeof(IExampleService).FullName, methodName);
                    }
                }
            }
        }
    }
    #endregion
}
#endregion
